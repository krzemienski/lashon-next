This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-25T23:21:06.290Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  workflows/
    deploy.yml
docs/
  app_flow_document.md
  backend_structure_document.md
  cursorrules_file.md
  frontend_guidelines_document.md
  implementation_plan.md
  project_requirements_document.md
  site-design-2.md
  site-design.md
  tech_stack_document.md
  windsurf_file.md
public/
  .nojekyll
  manifest.json
  next.svg
  three-dots.svg
  vercel.svg
src/
  app/
    about/
      page.tsx
    components/
      About/
        About.js
      BackToTop/
        BackToTop.js
      BandIdentity/
        BandIdentity.js
      ContactUs/
        ContactUs.js
      Footer/
        Footer.js
      IntroTourDates/
        IntroTourDates.js
      Listen/
        Listen.js
      NewAlbum/
        NewAlbum.js
      PhotoGallery/
        PhotoGallery.js
      Shows/
        Shows.js
      TextParallax/
        TextParallax.js
      TourDates/
        TourDates.js
    contact/
      page.tsx
    gallery/
      page.tsx
    global-components/
      AudioPlayer/
        AudioPlayer.js
        Controls.js
        DisplayTrack.js
        ProgressBar.js
        Tracks.js
      ButtonPrimary/
        ButtonPrimary.js
      ContactForm/
        ContactForm.js
      Container/
        Container.js
      ScrollTo/
        ScrollTo.js
      SubscribeForm/
        SubscribeForm.js
    music/
      page.tsx
    svg-icons/
      svg-icons.js
    util/
      animate-scroll.js
      scrollTo.js
      useObserver.js
    globals.css
    layout.tsx
    page.tsx
  components/
    about/
      Quote.tsx
      Story.tsx
    contact/
      ContactForm.tsx
      SocialLinks.tsx
    gallery/
      PhotoGrid.tsx
    home/
      AboutTeaser.tsx
      FeaturedRelease.tsx
      Hero.tsx
      Intro.tsx
    layout/
      Footer.tsx
      Header.tsx
      MainLayout.tsx
    music/
      Discography.tsx
      MusicPlayer.tsx
    shared/
      PageHeader.tsx
  data/
    navigation.ts
  styles/
    fonts.css
  types/
    assets.d.ts
  utils/
    assetPath.ts
    images.ts
temp-assets/
  placeholder.svg
.gitignore
CLAUDE.md
fix.sh
jsconfig.json
lashon_music_website.code-workspace
LICENSE
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json

================================================================
Files
================================================================

================
File: .github/workflows/deploy.yml
================
name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: npm ci

      - name: Build with Next.js
        run: npm run build
        env:
          NEXT_PUBLIC_BASE_PATH: /lashon-next

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

================
File: docs/app_flow_document.md
================
# Introduction

The Lashon.Music website is a modern, visually striking online experience designed to showcase Lashon’s artistry, her personal story, and her latest musical releases. This application draws design inspiration from Sabrina Carpenter’s site and employs the Wix Template #2956 to create a bold aesthetic that leverages high-quality images and clean, impactful text. Visitors to the site are invited to explore a journey that not only highlights powerful visuals but also guides them towards key actions such as listening to music, joining a mailing list, and connecting through social media for collaborations and bookings.

# Onboarding and Sign-In/Sign-Up

Since the primary audience consists of visitors exploring the music and story behind Lashon, the onboarding process starts right at the landing page. When a new user arrives at the site, they are immediately greeted with a powerful hero image and clear call-to-action buttons that encourage deeper exploration of the site’s content. Although there is no traditional account creation process or sign-in routine, the website provides a newsletter sign-up form. This allows fans to join Lashon’s inner circle by simply entering their email address and clicking a sign-up button, ensuring they stay updated on new releases, upcoming events, and exclusive insights. Account-based settings may be introduced in the future for more personalized experiences, but initially, the focus is on a seamless, accessible browsing experience without the need for formal sign-in or sign-up.

# Main Dashboard or Home Page

The home page acts as the central hub for the entire user journey. Visitors are welcomed by an expansive, full-width hero section that prominently features one of Lashon’s signature images, such as her vibrant appearance in a deep emerald green dress or her elegant look in a backless black outfit. The page is designed with striking overlay text that boldly displays the site’s title and key descriptors, setting the tone for the modern, artistic experience. Prominent calls-to-action prompt users to ‘Explore My Music’ which seamlessly guides them further into the site. From this main dashboard, the navigation bar at the top of the page offers simple, clear links to other sections including About, Music, Gallery, and Contact, making it easy for users to move to any part of the website without confusion.

# Detailed Feature Flows and Page Transitions

The first feature flow begins with the dynamic Home page where a user instantly sees Lashon’s latest release and immersive visuals. Below the hero image, a dedicated horizontal strip highlights the newest music release, such as the track “Moolah,” complete with an enticing image and a clear button that directs users to external streaming platforms like Spotify, Apple Music, or YouTube. Scrolling further down, visitors are presented with an ‘About Teaser’ section that provides a short glimpse into Lashon’s personal journey and creative evolution. This teaser includes a button that takes users to the Detailed About page. On the About page, the experience deepens as users are greeted with another full-width banner featuring a warm, personal image, often of Lashon in a more intimate setting. The biography is displayed alongside compelling supporting photos that intersperse narrative with visual storytelling. The page concludes with a clear call-to-action, for example, inviting visitors to listen to her music or to explore further into her story. The Music page offers a detailed view of Lashon’s musical portfolio. Here, a large header banner featuring artwork from her key releases is followed by a featured single section that spotlights her latest track “Moolah.” This section includes large cover art, descriptive text about the release, and prominent “Listen Now” buttons that link directly to external streaming services. Additional releases, if available, are laid out as thumbnails or smaller image cards that maintain the site's bold aesthetic. Optional embedded players, whether from SoundCloud, Spotify, or YouTube, allow visitors to sample tracks directly on the site without needing to leave the page. From there, users may navigate to the Gallery page, where a minimal header introduces a grid or mosaic of editorial and performance photographs showcasing Lashon’s diverse looks. The page is designed with clickable thumbnails that expand to reveal full-size images in a lightbox effect, enhancing the user’s visual exploration without distractions. The Contact page concludes the journey by offering visitors a simple, clean form to reach out for bookings, collaborations, or any general queries. The form is accompanied by direct email links and social media icons that connect users with Lashon’s active profiles. This page maintains the same visual style as the rest of the site, ensuring a cohesive transition from one section to the next. The design also anticipates future additions, like pages for Events or a Merchandise Store, which can easily be incorporated into the established navigation structure.

# Settings and Account Management

Since the website is primarily a visitor-led experience with optional newsletter sign-up, settings and account management functions are minimal. Visitors who subscribe to the mailing list will receive confirmation and may later have access to options allowing them to update their subscription preferences. These settings are managed through integrated email marketing tools, ensuring that fans can easily modify their preferences or unsubscribe if needed. For any future development where a deeper account experience is implemented, a dedicated settings area will allow users to manage personal information, notification preferences, and other customizations before smoothly returning to the main browsing experience.

# Error States and Alternate Paths

When users navigate the site, if they encounter any issues such as an invalid link, form submission error, or interrupted connectivity, clear, concise error messages are displayed. These messages explain what went wrong and offer quick solutions, such as prompting users to check their internet connection or re-enter required information. On the Contact page, for example, if a form field is left empty or if the email address format is incorrect, an inline error message will notify the user to correct the mistake before proceeding. Likewise, if an external streaming service is temporarily unavailable, fallback links or a notification banner informs the user, ensuring that the overall flow remains intuitive and each alternate path gently guides users back to a functional state.

# Conclusion and Overall App Journey

The entire Lashon.Music website is designed as a connected, intuitive experience that leads visitors from the very first visual impression on the Home page, through a series of engaging, visually rich sections, and finally to actions that drive user engagement such as listening to music, subscribing to updates, or reaching out for collaborations. The user journey is seamless, starting with an appealing landing page, moving through detailed storytelling on the About page, engaging with music content on the Music page, enjoying a visual gallery on the Gallery page, and ending with direct contact options. Each page transition reinforces the site’s bold, modern aesthetic while ensuring that visitors understand exactly how to explore, interact, and become part of Lashon’s artistic journey. This carefully designed flow creates an immersive experience that turns casual browsers into dedicated fans, all while maintaining design flexibility for future enhancements.

================
File: docs/backend_structure_document.md
================
# Introduction

The backend of the Lashon.Music website is a critical part of the overall project that works behind the scenes to make sure everything runs smoothly. Even though the website is built primarily on Wix, the backend supports functions like streaming integrations, newsletter sign-ups, contact forms, and analytics. The project uses several third-party services to manage data, email campaigns, visitor tracking, and secure content delivery, ensuring that as more fans engage with Lashon’s art, everything remains responsive and reliable.

# Backend Architecture

The architecture is built around a combination of Wix’s built-in content management system and additional third-party services that handle advanced functionalities. This approach leverages a lightweight serverless design where Wix manages hosting and front-end interactions while services like Mailchimp, Google Analytics, and streaming API widgets take care of specific tasks. The design is modular and highly scalable, so if more pages or functionality (like events or an online store) are needed in the future, they can be added without disrupting the overall system. This architecture is easy to maintain because it relies on managed tools and integrations, which reduces the need for heavy custom code and facilitates rapid updates when necessary.

# Database Management

Data is handled primarily through Wix’s built-in data storage capabilities and secure cloud-based databases provided by third-party services. Visitor information from contact forms and newsletter sign-ups is transferred securely to systems like Mailchimp or Constant Contact. The site also utilizes Google Analytics to collect non-personal usage data, ensuring that trends and performance metrics are available without compromising personal information. Since the data requirements are fairly straightforward and do not involve complex relational data, no heavy-duty SQL or NoSQL databases are necessary. Instead, the focus is on using easy-to-manage data pipelines that ensure information is stored and retrieved without real manual overhead.

# API Design and Endpoints

The website leverages RESTful APIs and embedded widgets for its integrations rather than a custom built backend API. For example, when visitors click a “Listen Now” button, they are directed to streaming services such as Spotify, Apple Music, or YouTube. Similarly, the newsletter sign-up communicates with external email marketing tools through secure REST APIs. This method ensures that every interaction—from streaming music to signing up for updates or submitting the contact form—is handled via well-documented, secure endpoints. Each integration is designed for simplicity, with clear field mappings and secure token-based authentication if necessary, to facilitate seamless communication between the website and its third-party services.

# Hosting Solutions

The Lashon.Music site is hosted on the Wix platform, which provides a managed, cloud-based hosting solution. This environment offers high availability, security, and scalability right out of the box without requiring dedicated server management. Wix’s hosting services handle automatic backups, content delivery optimizations, and excellent performance on both desktop and mobile devices. By outsourcing hosting to a well-established platform, the project minimizes costs and technical overhead while ensuring reliable uptime and fast load times.

# Infrastructure Components

While the site’s core functions run on Wix, several infrastructure components work in the background to boost performance and user experience. A content delivery network (CDN) ensures that images and media load quickly by delivering content from servers that are geographically close to users. In addition, integrated caching mechanisms optimize page load times, especially for image-rich pages that feature high-resolution photos of Lashon. Although Wix abstracts many of these components, the overall setup is designed so that load balancing and caching are automatically managed, ensuring that the site remains responsive even during high traffic periods.

# Security Measures

Security is a top priority for Lashon.Music. The backend uses HTTPS by default to encrypt data in transit and to protect user interactions from potential eavesdropping or tampering. Contact forms and newsletter sign-ups are safeguarded with validation checks and anti-spam measures to thwart injection attacks. Integration with Mailchimp or similar tools also ensures that user data is managed in compliance with data protection regulations like GDPR. With Wix’s built-in security features alongside third-party services that uphold strict security standards, the website ensures that sensitive data is handled safely and that user trust is maintained.

# Monitoring and Maintenance

Continual monitoring and routine maintenance are key aspects of the backend's operation. Tools like Google Analytics provide real-time insights into visitor behavior and overall performance, helping identify any potential issues before they escalate. The Wix platform offers built-in diagnostic tools and automatic updates that handle security patches and system improvements. Additionally, periodic performance reviews and manual checks are conducted to ensure that all third-party integrations continue to work flawlessly. This proactive approach to monitoring and maintenance guarantees that the backend remains stable, secure, and capable of accommodating future growth or changes in site functionality.

# Conclusion and Overall Backend Summary

In summary, the backend structure for Lashon.Music is intentionally designed to be simple yet robust. It combines Wix’s serverless environment with critical third-party integrations to manage everything from streaming and email sign-ups to visitor analytics and secure data handling. This architecture ensures that the site remains easy to maintain, scalable, and secure, meeting the current needs of showcasing Lashon’s artistry while providing a solid foundation for future enhancements. The backend setup stands out because it efficiently blends a managed hosting environment with specialized services, all aimed at ensuring an engaging, secure, and high-performance experience for both fans and collaborators.

================
File: docs/cursorrules_file.md
================
# .cursorrules

## Project Overview

*   **Type:** cursorrules_file
*   **Description:** A comprehensive design for the Lashon.Music website, drawing inspiration from Sabrina Carpenter’s site and Wix Template #2956. The site will use bold imagery, striking visuals, and refined editorial layout to showcase Lashon’s artistry, biography, music releases, and future collaborations.
*   **Primary Goal:** Increase engagement with Lashon’s music, expand her fan base, and facilitate connections for potential collaborations through clear calls-to-action, integrated streaming links, newsletter sign-ups, and social media connectivity.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   Wix Template #2956: Structure is managed via Wix’s visual builder. Pages are created using a drag-and-drop editor where navigation is defined through individual pages (Home, About, Music, Gallery, Contact) rather than traditional file-based routing.
    *   Example 1: While frameworks like Next.js require an `app/[route]/page.tsx` convention, Wix organizes content by pages within its site dashboard.
    *   Example 2: Unlike file-based routers such as React Router 6 which use a `src/routes/` folder, Wix manages routing internally via its template settings.

### Core Directories

*   **Versioned Structure:**

    *   Site Pages: Each page (e.g., Home, About, Music, Gallery, Contact) is defined within the Wix editor as separate entities, ensuring a modular, easy-to-update structure.
    *   Media Assets: Images and multimedia files (green dress shoots, backless black images, white piano ensembles) are organized within Wix’s Media Manager for consistent access across pages.

### Key Files

*   **Stack-Versioned Patterns:**

    *   Home Page: Configured as the main landing page, featuring full-width hero sections, curated CTAs, and integrated content blocks.
    *   About Page: Combines biographical text and imagery on a well-balanced layout to highlight Lashon’s backstory and artistic evolution.
    *   Music Page: Emphasizes featured releases (e.g., ‘Moolah’) with embedded streaming links and player integrations.
    *   Additional Pages: Gallery and Contact pages follow similar guidelines to maintain visual consistency and usability.

## Tech Stack Rules

*   **Version Enforcement:**

    *   Wix@Template2956: Must adhere to Wix’s responsive design principles. Utilize built-in styling and dynamic content elements. All CTAs, form validations, and media integrations should follow Wix’s performance and accessibility guidelines.

## PRD Compliance

*   **Non-Negotiable:**

    *   "The site will feature bold, modern imagery with a deep emerald green, gold accents, and high-contrast black/off-white themes paired with clear navigation and direct streaming integrations." This requirement must be implemented exactly as specified to ensure the brand’s visual and functional consistency.

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   Example: The Home page in Wix Template #2956 will feature a dynamic hero section with a rotating slideshow (showcasing images of Lashon in her green dress, backless black attire, and white piano ensemble). CTAs such as "Explore My Music" route users directly to the Music page, ensuring seamless navigation throughout the site.

================
File: docs/frontend_guidelines_document.md
================
# Introduction

The frontend of the Lashon.Music website is the visual and interactive layer that brings Lashon’s artistry, story, and music to life. This document describes the design, technical decisions, and guidelines behind the creation of a modern, engaging web experience. The website uses a bold, modern aesthetic inspired by high-quality imagery and a clean layout that keeps the focus on the content. With a design that draws inspiration from notable sites like Sabrina Carpenter’s, the frontend aims to increase music engagement, expand the fan base, and encourage visitors to interact through streaming, signing up, or reaching out.

# Frontend Architecture

The architecture of the website is built using Wix Template https://www.wix.com/website-template/view/html/2956 as the foundational platform, which provides a robust and responsive framework. This template is enhanced by integrating modern design patterns and third-party tools like Lovable.dev, Cursor, and Windsurf to ensure real-time assistance in developing a cohesive design. The choice of Wix means that scalability, maintainability, and performance are managed through an established, user-friendly content management system. This architecture allows for future expansion, such as adding events or a merch store, without the need for significant restructuring.

# Design Principles

The guiding principles behind the design focus on usability, accessibility, and responsiveness. Every element is made with the non-technical user in mind while adhering to aesthetic excellence. The design leverages high-contrast elements such as deep emerald green and gold accents set against sleek black and off-white backgrounds. Text is presented in clean, bold sans-serif fonts that are easy to read, and image-rich content is used to tell Lashon’s personal story. These principles ensure that visitors have an intuitive experience that feels both inviting and professional.

# Styling and Theming

The styling approach of the project combines carefully selected color themes and typography to create a consistent visual identity. The website uses a palette of deep emerald green with gold accents, alongside black, charcoal, and white to create strong visual contrast. While the styling is managed through Wix’s built-in design tools, the approach follows proven methodologies that could be compared to CSS practices such as BEM or SMACSS in custom projects. The result is a site that maintains a unified look and feel across all pages, from bold hero images to streamlined buttons and call-to-action overlays.

# Component Structure

The website is organized into reusable and consistently styled components that keep the user journey smooth and predictable. Key components include the top navigation bar, full-width hero sections, content strips highlighting new music releases, image galleries, and contact forms. Each component is built to ensure that the overall layout remains modular and easy to update. The component-based approach enhances maintainability, making it simpler to introduce new features such as events or a store in the future without disturbing the overall design integrity.

# State Management

Due to the nature of the Wix platform, state management is handled primarily through built-in tools that manage dynamic content and interactive components. For example, newsletter sign-up forms and contact forms retain user input temporarily without the need for extensive client-side state management techniques like those seen in single-page applications. Essentially, the strategy is to leverage Wix’s native capabilities for managing user interactions and data, ensuring a smooth and error-free experience while keeping the frontend code straightforward and maintainable.

# Routing and Navigation

Navigation is designed to be simple and intuitive to streamline the visitor’s journey throughout the site. Wix handles the routing between pages, which are set up with a clear hierarchy and minimal clutter. Users find deep navigation cues in a top navigation bar that includes the Home, About, Music, Gallery, and Contact pages. The navigation is designed to be minimal, helping visitors focus on the content without distraction, making it easy for them to shift from getting to know Lashon to listening to her music or reaching out for further engagement.

# Performance Optimization

Performance is a key consideration throughout the frontend development process. The website leverages high-quality yet optimized images, lazy loading, and efficient asset management to ensure fast load times and smooth transitions. Many performance enhancements are provided by Wix itself, which handles code splitting and resource prioritization automatically. These strategies ensure that even with an image-intensive design, the website remains fast and responsive on both desktop and mobile devices.

# Testing and Quality Assurance

Ensuring a bug-free and smooth user experience is achieved through careful testing and quality assurance plans. Each page and component undergoes rigorous testing, including visual checks, functionality tests for forms and links, and testing across a range of devices and browsers. The built-in Wix preview feature aids in confirming responsiveness, while manual testing ensures that every interactive element—from streaming buttons to social media embeds—operates correctly. These quality practices help maintain the reliability and integrity of the site as it evolves.

# Conclusion and Overall Frontend Summary

The Lashon.Music frontend is a blend of modern design and robust functionality aimed at delivering an immersive experience that highlights Lashon’s artistic journey. By leveraging Wix’s responsive design capabilities alongside carefully curated components and styling guidelines, the website ensures both aesthetic appeal and practical usability. The thoughtful integration of navigation, state management, and performance optimizations sets a strong foundation not only for today's content but for future enhancements like additional pages or features. This comprehensive approach guarantees that the frontend aligns perfectly with the project’s goals and sets a benchmark for future digital artistic projects.

================
File: docs/implementation_plan.md
================
**Phase 1: Environment Setup**

1.  Set up a Wix account and select Wix Template https://www.wix.com/website-template/view/html/2956 as the base for the site. (Reference: PRD Section 2 & Tech Stack)
2.  Create a new project in Wix and name it “Lashon.Music”. Organize site pages in the Wix Editor: Home, About, Music, Gallery, and Contact, leaving placeholders for future pages (Events, Store). (Reference: PRD Section 2, 7)
3.  **Validation**: Log into the Wix dashboard and verify that Template https://www.wix.com/website-template/view/html/2956 is applied and the project structure (with all pages listed) is visible.

**Phase 2: Frontend Development – Home Page**

1.  In Wix Editor, edit the Home page.

    *   Add a top navigation bar with the site logo/text “LASHON.MUSIC” on the left and menu items (Home, About, Music, Gallery, Contact) right-aligned. (Reference: PRD Section 1, Navigation)
    *   Create a full-width Hero Section with either a static image or a slideshow that rotates between high-quality images (Lashon in the emerald green dress, backless black dress, white piano shot). Add a dark overlay.
    *   Overlay Text: Add large bold text “LASHON” and a subheading “Hip-Hop • R&B • Soul”.
    *   Insert a CTA button labeled “Explore My Music” that scrolls or links to the Music section/page. (Reference: PRD Section 1, Home Page Mockup)

2.  **Validation**: Preview the Home page in Wix Editor; the hero image (or slideshow) should display full-width and the text/CTA must be visible.

3.  Below the Hero Section, add a horizontal strip featuring the latest release:

    *   Insert a large image placeholder for the “Moolah” cover.
    *   Add text: Either "New Single Out Now: MOOLAH" or "Get Your Money Right with MOOLAH—Listen Now!".
    *   Place a CTA button labeled "LISTEN NOW" linking to streaming platforms (use placeholder URLs for now). (Reference: PRD Section 1, Home Page Mockup)

4.  **Validation**: Click the "LISTEN NOW" button in preview mode to confirm the link is active.

5.  Add an About Teaser Section on the Home page:

    *   Insert a text box with a 2-3 sentence excerpt from Lashon’s bio. (Reference: PRD Section 1, About Preview)
    *   Insert a CTA button labeled "Read My Story" linking to the About page.

6.  **Validation**: Verify that the teaser text appears correctly and the CTA navigates to the About page.

7.  Create an Image Collage Section (using Wix’s gallery layout) to display 2–3 smaller images of Lashon (backless black dress, white piano shot, etc.). (Reference: PRD Section 1, Imagery & Layout)

8.  **Validation**: Hover over images to ensure that any added hover effects (title/tagline) are visible.

9.  (Optional) Add a Newsletter Sign-Up form at the bottom of the Home page using Wix Form integrated with Mailchimp/Constant Contact:

    *   Include fields for Name and Email.
    *   Insert a submit button labeled "Sign Up" with instructional text "Join the Inner Circle. Be the first to know about new music and events." (Reference: PRD Section 1, Mailing List / Newsletter)

10. **Validation**: Test form submission in preview mode to confirm proper input capture.

**Phase 3: Frontend Development – About Page**

1.  Create and design the About page in Wix Editor.

    *   Add a full-width Hero Banner at the top using a personal performance image (e.g., studio shot with a warm vibe; possibly Lashon singing in a yellow dress). (Reference: PRD Section 2, About Page Mockup)

2.  Insert a large heading titled "Meet Lashon" (or "About Lashon").

    *   On the left (or in a side-by-side layout), add the concise biography text describing her journey from MVP athlete to music artist. (Reference: PRD Section 2, About Page Content)

3.  Insert supporting photos alongside the text (e.g., the white piano shot) to break up text and add visual interest. (Reference: PRD Section 2, Supporting Photos)

4.  Add a CTA at the bottom of the bio section, for example, a button labeled "Discover My Music" linking to the Music page. (Reference: PRD Section 2, CTA or Quote)

5.  **Validation**: Preview the About page ensuring text, images, and CTA are properly aligned and responsive.

**Phase 4: Frontend Development – Music Page**

1.  Create the Music page using Wix Editor.

    *   Add a header/banner section with a wide image (possibly the “Moolah” cover or another strong visual) along with overlay text "My Music". (Reference: PRD Section 3, Music Page Mockup)

2.  Create a Featured Single Section:

    *   Insert a large cover image for “Moolah”.
    *   Add descriptive text such as "Check out my latest single, Moolah. Available now!".
    *   Insert a CTA button labeled "LISTEN NOW" linking to streaming services (e.g., Spotify, Apple Music, YouTube). (Reference: PRD Section 3, Featured Single / EP)

3.  (Optional) Add a section for additional releases:

    *   Insert smaller thumbnail images (e.g., for “Woman”) with brief text and links to respective streaming platforms.

4.  (Optional) Embed music players or video content using Wix’s HTML iframe widget for direct previews. (Reference: PRD Section 3, Embedded Players / Videos)

5.  **Validation**: In preview mode, click the streaming links/buttons to verify they correctly redirect and embedded players work as expected.

**Phase 5: Frontend Development – Gallery Page**

1.  Create the Gallery page using the Wix Pro Gallery widget or a similar layout tool.

    *   Add a header with the text "Gallery" and a subheader "Explore Lashon's World". (Reference: PRD Section 4, Gallery Page Mockup)

2.  Upload and arrange high-resolution images in a mosaic/grid layout (include the green dress shoot, backless black portrait, white piano shot, etc.).

3.  Enable lightbox functionality so that clicking on a thumbnail opens a larger version of each image with minimal captions. (Reference: PRD Section 4, Photo Collection / Mosaic)

4.  **Validation**: Test each image’s lightbox in the preview mode and check responsiveness on mobile devices.

**Phase 6: Frontend Development – Contact Page**

1.  Create the Contact page using Wix Editor.

    *   Insert a banner/header section with either a simple background (pattern or color scheme matching brand colors) and a title "Get in Touch". (Reference: PRD Section 5, Contact Page Mockup)

2.  Add a contact form with fields for Name, Email, and Message using Wix Forms. (Reference: PRD Section 5, Contact Form)

3.  Include a CTA button labeled "Send".

4.  Insert direct email links or text for business inquiries and place social media icon links (Instagram, TikTok, YouTube, etc.). (Reference: PRD Section 5, Social Media Links)

5.  (Optional) Embed an Instagram feed if desired using Wix’s social widget.

6.  **Validation**: Submit a test message through the form in preview mode and check that social media links navigate correctly.

**Phase 7: Integration & Responsive Adjustments**

1.  Verify navigation across all pages (ensure top navigation is consistent and links work). (Reference: PRD Section 1 & 7)
2.  Use Wix’s mobile editor to adjust and test responsiveness on mobile and tablet views for each page. (Reference: PRD Section 6, Usability)
3.  Ensure that all embedded content (streaming players, forms, galleries) function correctly across devices.
4.  **Validation**: Preview the entire site in desktop and mobile modes, checking for any layout issues.

**Phase 8: Third-Party Integrations & Deployment**

1.  Integrate Google Analytics into the Wix website via the Wix Dashboard (Settings → Tracking & Analytics). (Reference: PRD Section 5, Tech Stack)

2.  Set up and integrate Mailchimp (or Constant Contact) with the newsletter sign-up form to capture subscriber emails. (Reference: PRD Section 5, Newsletter Signup)

3.  **Validation**: Confirm that analytics data begins to capture visit metrics and test newsletter sign-up submissions.

4.  Final Review & Publish the Website:

    *   Review the site for overall design consistency, navigation flow, and content accuracy (ensuring branding colors, typography, and imagery are cohesive: deep emerald green, gold accents, black/charcoal, off-white backgrounds). (Reference: PRD Section 1, Overall Style & Branding)
    *   Publish the site through Wix and perform end-to-end tests, ensuring all CTAs (e.g., streaming links, navigation, contact form) function correctly.

**Phase 9: Post-Launch**

1.  Monitor site performance using Google Analytics and adjust image sizes or layout elements if load times exceed 2-3 seconds. (Reference: PRD Section 6, Performance)
2.  Periodically review email campaign results from Mailchimp/Constant Contact and iterate on the website content based on user engagement and feedback. (Reference: PRD Section 7, Future Expansion)
3.  Plan for future integration of additional pages (Events, Store) by ensuring that the top navigation and overall design remain modular and easily expandable. (Reference: PRD Section 2, In-Scope vs. Out-of-Scope)

**Validation**: After post-launch adjustments, simulate user interactions through multiple devices and browsers to confirm the site meets design and functionality requirements.

This step-by-step implementation plan is designed to meet the requirements outlined in the PRD for Lashon.Music, ensuring a responsive, visually striking, and user-friendly website built on Wix Template https://www.wix.com/website-template/view/html/2956.

================
File: docs/project_requirements_document.md
================
# Project Requirements Document: Lashon.Music Website

## 1. Project Overview

Lashon.Music is an end-to-end website built to showcase Lashon’s artistry, story, and musical releases in a visually striking and modern way. Drawing inspiration from Sabrina Carpenter’s website and using Wix Template #2956, the site will feature bold imagery—such as high-quality photos of Lashon in a green dress, backless black outfit, and a refined white piano ensemble—to communicate a strong, artistic brand identity. The design emphasizes a clean, editorial style that uses deep emerald green, gold accents, black backgrounds, and off-white contrast to create a unique aesthetic that reflects both energy and sophistication.

The site is being built to increase engagement with Lashon’s music, expand her fan base, and facilitate connections for potential collaborations. Key success criteria include strong visual impact, intuitive navigation, clear calls-to-action (like “Listen Now” and newsletter sign-ups), and seamless integration with streaming platforms and social media channels. Ultimately, this website will act as both a portfolio and a hub for fans to explore her music, learn about her journey, and connect directly through contact forms or social media links.

## 2. In-Scope vs. Out-of-Scope

**In-Scope:**

*   A multi-page website comprising Home, About, Music, Gallery, and Contact pages.
*   High-quality, full-width images and multimedia integration showcasing Lashon’s different looks.
*   A design following a bold, modern aesthetic with a color palette of deep emerald green, gold accents, black/charcoal, and off-white.
*   Responsive layout and mobile-friendly design using Wix Template #2956.
*   Clear navigation with minimal top navigation (Home, About, Music, Gallery, Contact).
*   Integrated CTAs for streaming music directly via Spotify, Apple Music, and YouTube links.
*   Newsletter signup integration using tools like Mailchimp or Constant Contact.
*   Social media embeds/links (Instagram, TikTok, YouTube, etc.) and Google Analytics for tracking.
*   Placeholder future-ready design for additional pages (Events and Store) that can be added later.

**Out-of-Scope:**

*   Advanced functionalities such as an interactive blog or fan forum for user-generated content.
*   Direct music downloads from the website.
*   Custom development for e-commerce; future merchandising would be handled using Wix’s store functionality once finalized.
*   Heavy backend customizations; the project will mainly utilize Wix’s tools along with integrated third-party services.
*   Extensive animation or transition effects beyond what is achievable through Wix’s standard capabilities.

## 3. User Flow

A typical visitor arrives at the Lashon.Music homepage, greeted by a dynamic full-width hero image or a slideshow showcasing Lashon in her signature styles. They see bold headline text ("LASHON” with a subheading indicating her music genres) and a strong call-to-action, such as “Explore My Music.” Below the hero, a dedicated section highlights the latest release ("Moolah") with an engaging image, textual prompt, and a button that directs them to streaming platforms. Visitors can easily scroll down for an “About Teaser” that briefly describes Lashon’s journey, accompanied by a button linking to the About page for more in-depth background information.

From the homepage, users navigate using a minimal top navigation menu to reach the About, Music, Gallery, and Contact pages. On the About page, they read a concise yet compelling biography with interspersed images, gaining insight into her background and artistic evolution. The Music page showcases her releases with large cover images and embedded streaming links while the Gallery page provides a visually appealing mosaic of her photos. Finally, the Contact page offers a straightforward form for inquiries and includes direct links to her social media channels, making it easy for fans or potential collaborators to reach out.

## 4. Core Features

*   **Responsive Home Page:**

    *   Full-width hero image or slideshow with overlay text and CTA button.
    *   Horizontal strip for the latest release ("Moolah") with direct links to streaming platforms.

*   **About Page Layout:**

    *   A captivating hero banner image with a concise, engaging biography.
    *   Side-by-side layout mixing text with supporting photos and a prominent call-to-action (e.g., “Discover My Music”).

*   **Music Page Integration:**

    *   Display of featured single/EP with high-quality cover art, descriptive text, and “Listen Now” buttons linking to Spotify, Apple Music, and YouTube.
    *   Optional embedded music players or video content to allow on-site previews.

*   **Gallery Page:**

    *   A grid or mosaic layout featuring thumbnails of editorial and performance images.
    *   Clickable thumbnails that open a lightbox for viewing full-size images with minimal captions.

*   **Contact Page Functionality:**

    *   Simple form with fields for Name, Email, and Message.
    *   Direct email links and social media icons linking to Lashon’s profiles.

*   **Newsletter Signup:**

    *   Integration with email marketing tools (e.g., Mailchimp) for fan engagement and updates.

*   **Future-Ready Navigation:**

    *   A clean, minimal top navigation bar that can later accommodate additional pages such as Events or Store without needing redesign.

## 5. Tech Stack & Tools

*   **Design & Development Platform:**

    *   Use Wix Template #2956 for visual and structural design.

*   **Front-End:**

    *   Wix’s built-in tools for responsive design and modern layout.
    *   Lovable.dev for generating front-end components, ensuring consistency with the visual brand.
    *   Cursor and Windsurf for real-time AI-assisted adjustments and code editing if needed.

*   **Backend/Integrations:**

    *   Third-party integrations with embedded streaming services (Spotify, Apple Music, YouTube).
    *   Mailchimp or Constant Contact integration for managing newsletter sign-ups.
    *   Google Analytics for tracking visitor behavior and engagement.

*   **AI & Code Assistance:**

    *   ChatGPT (using GPT-4 model) for advanced code generation and content refinement.
    *   Claude and Gemini AI for additional intelligent code assistance.
    *   Bolt for quick project scaffolding and establishing best practices.

*   **IDE & Development Tools:**

    *   VS Code, Aide, and Replit for code editing and version control when making custom adjustments outside Wix.

## 6. Non-Functional Requirements

*   **Performance:**

    *   Fast load times, with response times ideally under 2-3 seconds, especially on image-heavy pages.
    *   Optimized image sizes to balance quality and performance.

*   **Security:**

    *   Secure integration with third-party services (streaming, mail signup) using HTTPS.
    *   Proper form validation on the Contact page to prevent injection attacks or spam.

*   **Compliance & Accessibility:**

    *   Follow standard web accessibility guidelines (contrast ratio, screen reader compatibility, keyboard navigability).
    *   Comply with privacy regulations regarding email signups and data collection (e.g., GDPR).

*   **Usability:**

    *   Intuitive navigation and consistent design elements across pages.
    *   Mobile-friendly layout ensuring seamless interactions on tablets and smartphones.

## 7. Constraints & Assumptions

*   **Constraints:**

    *   The project will be built on Wix, which may limit some backend customizations.
    *   Reliance on third-party services (streaming APIs, Mailchimp, Google Analytics), which might have rate limits or downtime.
    *   The design and implementation are constrained to visual and interaction capabilities offered by Wix Template #2956.

*   **Assumptions:**

    *   High-quality images (green dress, backless black, white piano, etc.) and finalized text content are ready or will be supplied in a timely manner.
    *   Lashon’s social media channels and streaming service pages are active and ready to be linked.
    *   The website’s design may need to be easily expandable for future pages like Events or Store, hence the need for a flexible navigation and layout.
    *   The project expects future integrations with email marketing tools and analytic services, so the design must support embedding and linking without major overhauls.

## 8. Known Issues & Potential Pitfalls

*   **API Rate Limits & Third-Party Dependencies:**

    *   Streaming platforms and email marketing tools may impose API rate limits or downtime. It is advisable to monitor these integrations and have fallback links in place.

*   **Image Optimization:**

    *   High-resolution images can slow down page load times on mobile devices. Care should be taken to optimize images for web use without compromising visual quality.

*   **Responsive Design Challenges:**

    *   Ensuring all pages (especially image-rich Home and Gallery pages) display flawlessly on all devices might require thorough testing across various screen sizes.

*   **Future Expansion:**

    *   Although future pages (Events, Store) are out-of-scope initially, the design should be modular enough to integrate these smoothly later. Pre-planning for additional navigation items and page layouts may reduce future redevelopment work.

*   **Content Updates:**

    *   Regular updates to music releases, news, and gallery images must be managed easily. Leveraging Wix’s native content management features can help, but might need periodic manual updates to maintain consistency and performance.

This document lays out the complete requirements for the Lashon.Music website. It serves as the main reference for technical documents on tech stack decisions, frontend guidelines, backend structure, and all implementation details. Every section is designed to avoid ambiguity, ensuring that subsequent technical efforts are aligned with the project’s vision and objectives.

================
File: docs/site-design-2.md
================
Below is a proposed end-to-end website design for Loshan.music—drawing visual inspiration from Sabrina Carpenter’s site and using the https://www.wix.com/website-template/view/html/2956 template. The goal is to create a bold, modern aesthetic that highlights Lashon’s artistry, story, and new releases. The design will utilize the best of her striking images—especially those in green dresses, backless black outfits, and the white ensemble at the piano—paired with an updated/streamlined version of her bio.
https://github.com/stefanogali/panic-panini-next is what we want to use for the home page



1. Overall Style & Branding

Color Palette
	•	Deep Emerald Green & Gold for accents, mirroring the “Moolah” cover art and the green dress shoot.
	•	Black and Charcoal Gray as primary backgrounds or text, giving a sleek, modern feel (akin to Sabrina Carpenter’s site).
	•	White / Off-White text or backgrounds for contrast in sections (especially behind large images or hero banners).

Typography
	•	A clean, bold sans-serif (e.g., Montserrat or Bebas Neue) for prominent headlines, echoing the big-block style often seen on Sabrina Carpenter’s landing page.
	•	A more neutral sans-serif (e.g., Lato, Open Sans) for body text and smaller headings, ensuring legibility on all devices.

Imagery & Layout
	•	Use full-width images or large, horizontally oriented “strips” to showcase Lashon in her various looks:
	•	The teal/gold environment (for “Moolah”)
	•	Backless black dress images (chic editorial vibe)
	•	The white piano shoot (elevated, refined aesthetic)
	•	The microphone / studio image (artistic, performing energy)
	•	Where possible, incorporate short text overlays with calls to action.

	•	A minimal top navigation (logo/title on the left, menu items right-aligned):
	1.	Home
	2.	About
	3.	Music
	4.	Gallery
	5.	Contact

1. Home Page
	1.	Hero Section
	•	Featured Image/Slideshow:
	•	Option 1: Large, full-width shot of Lashon in the emerald green gown on the gold couch (it’s visually similar in “pop” to Sabrina Carpenter’s site’s hero).
	•	Option 2: A slideshow cycling between the green dress shot, the black backless dress shot, and the white piano shot.
	•	Minimal Text Overlay:
	•	Large text: LASHON (in bold sans-serif).
	•	Smaller text/descriptor: Hip-Hop • R&B • Soul or “Miami-Born. New York-Trained. Ready to Rise.”
	•	Primary CTA: “Explore My Music” (scrolls down to the Music section or links to the Music page).
	2.	New Release Highlight
	•	Directly beneath the hero, display Lashon’s latest release in a horizontally oriented “strip.”
	•	Image: Use the “Moolah” cover (the teal background with “MOOLAH” spelled out and Lashon in a matching gown).
	•	Text: “New Single Out Now: MOOLAH” or “Get Your Money Right with MOOLAH—Listen Now!”
	•	CTA: “Listen Now” linking to streaming platforms (Spotify, Apple Music, etc.).
	3.	About Preview
	•	A small text box or two- to three-sentence excerpt from her revised bio:
	“From MVP athlete to underground rap champion, Lashon has never followed the traditional path. Now, she’s fusing hip-hop, R&B, and soul to make her mark on the music world.”
	•	CTA: “Read My Story” → takes users to the About page.
	4.	Visual Teaser / Collage
	•	A row or mosaic of 2–4 images (like the black backless dress, white piano shot, or the microphone performance) to showcase her style.
	•	Possibly with hover effects (title or short tagline on hover).
	5.	Mailing List / Newsletter (Optional)
	•	A simple sign-up box if Lashon wants to build a fan community:
	•	“Join the Inner Circle. Be the first to hear about new music and shows.”
	•	Email field + “Sign Up” button.

2. About Page
	1.	Hero Image
	•	Full-width banner of Lashon with a slightly more personal, warm vibe, e.g., the studio shot singing in the yellow dress or something with a performance feel to emphasize her artistic side.
	•	Large heading: “Meet Lashon” or “About Lashon.”
	2.	Bio Text (Condensed & Polished)
Use a more concise version of the provided copy to keep it web-friendly. For example:
	From Miami Courts to NYC Stages
Lashon Thomas, a dynamic hip-hop, R&B, and soul artist, found her passion for music after an accomplished athletic career—15 MVP awards and a spot in the Elite Youth Basketball League. Despite her success on the court, she felt drawn to the arts and pursued theatre at Florida A&M before transferring to the American Academy of Dramatic Arts in New York.
	It was there that she truly discovered her love for performing, but it wasn’t until 2020 that her real musical journey began. After two years of intense study—and earning underground rap championship titles—Lashon is poised for a breakthrough year in 2023. Watch her fuse her athletic drive, theater background, and musical talent into an explosive sound that’s all her own.
	3.	Supporting Photos
	•	Intermix text blocks with photos, such as the white piano shot or a candid “Moolah” shoot image, to add visual interest and break up paragraphs.
	4.	CTA or Quote
	•	Possibly end with a short, bold quote from Lashon: “Music is how I turn my story into a celebration.”
	•	Button: “Listen to My Music” or “Check Out My Latest Single.”

1. Music Page
	1.	Header / Main Banner
	•	A wide banner showcasing the “Moolah” cover or the “Woman” cover.
	•	Title: “My Music” or “Discography” in a bold, stylized font.
	2.	Featured Single / EP
	•	Large section for the newest release. If “Moolah” is the lead single, highlight that with cover art and a short snippet:
	“Feel the rhythm of ‘Moolah.’ Available on Spotify, Apple Music, and more.”
	•	CTA: “Listen Now.”
	3.	Other Releases
	•	Thumbnails or smaller image cards for any other singles like “Woman,” with each card linking to streaming platforms or a separate song detail page.
	•	If there are no additional singles yet, simply keep the page dedicated to “Moolah” with a note: “More music coming soon—stay tuned!”
	4.	Embedded Players / Videos (Optional)
	•	If Lashon has a music video or performance clip, embed a YouTube or Wix Video link.
	•	If she has a SoundCloud or Spotify track, embed the player to let visitors preview directly on the site.

2. Gallery Page
	1.	Gallery Introduction
	•	A minimal heading: “Gallery”
	•	Possibly a sub-heading: “Explore the visuals behind the music.”
	2.	Photo Collection / Mosaic
	•	Group images into sections or a grid:
	•	Fashion / Editorial: The black dress with the open back, the green gown looks, or the layered jean skirt shot from the “Woman” cover.
	•	Studio / Performance: The gold/yellow studio shot singing into the microphone.
	•	Behind-the-Scenes / Lifestyle (if available).
	•	Clickable thumbnails that open into a lightbox/slideshow, letting users browse full-size images.
	3.	Captions
	•	Optional short captions or disclaimers about each shoot.
	•	Keep the design minimal to let the images speak for themselves.

3. Contact Page
	1.	Contact Form
	•	Simple and straightforward: Name, Email, Message.
	•	CTA: “Send” or “Reach Out.”
	•	Sub-header: “For bookings, collaborations, or just to say hello—drop a note below.”
	2.	Direct Email Link
	•	If you have a dedicated business email, list it here.
	3.	Social Media Links
	•	Icons linking to Lashon’s socials (Instagram, TikTok, YouTube, etc.).
	•	Possibly an embedded Instagram feed that auto-updates.

Refined Copy Example

Below is an example you can adapt directly into the site (feel free to adjust wording as needed):

	Hero Text
Lashon
Hip-Hop • R&B • Soul
“Moolah” Out Now

	About Teaser
“I’m Lashon—Miami-born, New York-trained, and here to bring my story to life through music. Ready to witness raw talent, unstoppable drive, and a love for performance that knows no limits?”

	Short Bio Snippet (On About Page)
“I grew up on the basketball court, earning 15 MVP titles and a place in the Elite Youth Basketball League. But my heart was always in the arts. After studying theater at FAMU and the American Academy of Dramatic Arts, I discovered my true love for writing and performing music. Now, I’m blending hip-hop, R&B, and soul into a sound that’s uniquely mine. Join me as I take my next bold step in 2023.”

Putting It All Together
	1.	Strong Visual Impact: Align the home page hero image and color scheme (greens, golds, black) to match Lashon’s brand and the “Moolah” artwork.
	2.	Clean Navigation: Keep the menu concise. Keep the site’s structure streamlined (Home, About, Music, Gallery, Contact).
	3.	Engaging Content: Display each major piece of Lashon’s story or imagery in an easy, scroll-based format—much like Sabrina Carpenter’s site, which uses big images and minimal text to keep visitors immersed in the brand.
	4.	CTA Flow: Encourage listening to music, reading about Lashon’s background, and contacting for bookings or following on socials.
	5.	Responsive & Mobile-Friendly: Ensure each section resizes effectively on tablets and phones, especially the hero slideshow or large background images.

By incorporating the bold editorial photos, refined copy, and an intuitive site layout, Loshan.music will give visitors an immediate sense of who Lashon is, why her music matters, and how they can follow her journey—and it will visually echo the sleek, professional style of Sabrina Carpenter’s website that inspired this design.

================
File: docs/site-design.md
================
Concept Overview

We’ll adapt the Wix template https://www.wix.com/website-template/view/html/2956 to have an elegant, modern feel reminiscent of Sabrina Carpenter’s site. The site will feature lush imagery, a focus on Lashon’s story, and seamless ways to explore her music. The overall color palette should incorporate rich jewel tones (e.g. emerald green, gold, and black) paired with neutrals so that the vibrant photography takes center stage. Typography should be sleek but bold—think a minimal sans-serif for main text and a modern serif or script accent for headings.

Below is a proposed site structure, page-by-page description, and suggestions on which images/bio text to use.

1. Home Page

Hero Section
	•	Layout & Style: A full-width hero banner featuring a dynamic slideshow or a single, compelling image of Lashon.
	•	Recommended Image: The green dress shots (either the wide shot on the gold couch or the vertical shot with Lashon posing). These images immediately grab attention with their deep emerald color and the regal setting, echoing the Sabrina Carpenter site’s eye-catching hero image.
	•	Text Overlay: Large, stylish text reading “LASHON” (or “Introducing Lashon”), with a smaller tagline beneath—e.g. “Hip-Hop • R&B • Soul” or “Rising Artist from Miami”.
	•	Call-to-Action (CTA): A simple button, e.g. “Enter Site” or “Explore Music”, which scrolls down or leads to the Music section.

Featured Music / New Release
	•	Inspiration: Sabrina Carpenter’s homepage highlights her latest release prominently.
	•	Placement: Right below the hero, a horizontal “strip” or box that features Lashon’s newest single or EP (you can label it “Moolah,” “Woman,” or whichever upcoming track you want to promote first).
	•	Image & Copy:
	•	Use the “Moolah” cover shot (the teal/gold environment with “MOOLAH” behind Lashon).
	•	Text snippet: “Listen to my new single, Moolah—available now on all streaming platforms.”
	•	CTA: “Listen Now” linking to streaming platforms.

About Teaser
	•	A short excerpt of Lashon’s story (two or three sentences) that encourages people to read more.
	•	Example: “Miami-born artist Lashon fuses hip-hop, R&B, and soul into a powerful performance style. Once an elite athlete, Lashon has found her true calling in music—turning her passion into a breakout career.”
	•	A “Learn More” button linking to the full About page.

Heroic Imagery / Promo Section
	•	You could include a “tiled” or “masonry” layout of the high-fashion photos (like the backless black dress pictures, or the white outfit by the piano) to showcase Lashon’s unique style and brand.

Newsletter Signup (Optional)
	•	A subtle sign-up form (if you want to build an email list), with a short note: “Be the first to know about new music, events, and exclusive content.”

Mobile Considerations
	•	Ensure the hero image scales for mobile devices. The “Featured Music” strip can become a vertical section on phones, with the single’s artwork up top and the CTA below.

2. About Page

Page Intro
	•	Large heading: “Meet Lashon” or “About Lashon”
	•	A signature photo at the top or set as a background banner (e.g. the glamorous shot in the recording studio wearing the gold dress, microphone in hand, to emphasize she’s a performing artist).

Bio Text
	•	Reworked & Streamlined Version of the provided bio (to keep it web-friendly). For example:

	Miami Roots & An Unstoppable Drive
From her MVP-winning days on the basketball court to her discovery of a deep passion for performing, Lashon’s journey has been anything but ordinary. Growing up in Miami, Florida, she excelled in athletics and competed in the Elite Youth Basketball League (EYBL) before pursuing theatre at Florida A&M University. But her true calling emerged in 2020, when she poured her heart into writing and performing music.

	Now, in 2023, Lashon is stepping into the spotlight as a hip-hop, R&B, and soul artist. Having honed her craft through countless underground performances and rap battles, she’s ready to share her voice with the world. Watch as this rising star turns her passion into an unstoppable force in music.

	•	You can tweak or shorten further, but maintain the essence of her story.

Additional Photos or Sections
	•	Use a small gallery or single hero image to break up text paragraphs (perhaps the white piano shot or an athletic-themed shot if you have one).
	•	End with a CTA like: “Listen to the Music” or “Get in Touch for Booking” leading to relevant pages.

3. Music Page

Header & Layout
	•	A simple heading: “Music” or “Discography”.
	•	Big promo for the latest release, same “Moolah” image, or the “Woman” single artwork.
	•	Include embedded players if you have tracks available (Spotify, SoundCloud, Apple Music) or a placeholder to add them later.

Singles / EP / Albums Listing
	•	Grid or list of Lashon’s releases with quick links to major streaming services.
	•	You could reuse the “Moolah” cover, “Woman” cover, or any other single/EP covers.

Music Videos
	•	If Lashon has official music videos or performance videos, embed or link them here.
	•	You could highlight the studio shot with the microphone as a still preview for a music video.

4. Gallery / Photos Page

Concept
	•	Showcases Lashon’s style and brand with large, high-resolution images.
	•	You can create separate sections or a single mosaic for:
	1.	Fashion Shoots (the backless black dress, the green velvet couch, the white piano shot).
	2.	Live Performances / In-Studio (the bright yellow outfit singing into the mic).
	3.	Behind the Scenes (if any casual or candid images exist).

Presentation
	•	Employ Wix’s built-in galleries or strips with parallax scrolling.
	•	Each image can expand in a lightbox for a closer look.

5. Live / Events Page (Optional)

Purpose
	•	If Lashon plans to perform or do public appearances, create an “Events” or “Live” page.
	•	List upcoming shows or appearances, with ticket links if applicable.

Layout
	•	Simple chronological list or a dynamic calendar.
	•	Show a featured photo (maybe the microphone shot or a captivating stage-like shot) as a background.

6. Contact / Bookings Page

Contact Form
	•	Basic form for business or fan inquiries.
	•	Link to a manager or booking agent email if available.

Social Media Links
	•	Icons or clickable links to Lashon’s social media—Instagram, Twitter, YouTube, TikTok, etc.
	•	Possibly embed an Instagram feed to maintain a fresh, always-updating visual.

7. Store / Merch Page (Future Option)
	•	If Lashon sells merch, we can add a “Shop” page integrated with Wix’s store features.
	•	Display product images, sizing, and checkout options.

Overall Visual & Design Notes
	1.	Color Palette: Emphasize emerald greens, gold accents, black, and white/gray neutrals. This complements Lashon’s fashion shots and matches the vibe of the teal/gold environment in the “Moolah” cover.
	2.	Typography:
	•	A bold, modern sans-serif for headings (e.g. Montserrat, Bebas Neue, or something similarly crisp).
	•	A simple, clean sans-serif (e.g. Open Sans, Lato) for body text.
	3.	Navigation Bar:
	•	Keep it minimal: Home | Music | About | Gallery | Contact (and “Live/Events” or “Store” if needed).
	•	Possibly feature Lashon’s name/logo on the left and the menu links on the right.
	4.	Animations: Subtle fade-ins or slide-in transitions to give a dynamic feel but keep load times quick.
	5.	Responsiveness: Ensure images and text adapt well on mobile. Possibly use one strong vertical image on smaller screens instead of complex sliders.

Final Copy Suggestions

Feel free to modify the about text or any headings to match your branding tone. For instance, you could lead with a more personal approach:

	“I’m Lashon—Miami-born, New York-trained, and driven by the power of hip-hop, R&B, and soul. My journey has taken me from basketball courts to theatrical stages, and now, to the studio mic. Get ready for a new wave of energy and passion in 2023. I can’t wait to share my story—and my music—with you.”

Incorporate short, bold statements on the homepage or music pages, e.g. “Where rhythm meets soul, that’s where you’ll find Lashon.”

Putting It All Together

By merging the sleek feel of the https://www.wix.com/website-template/view/html/2956, the inspiring aesthetic of Sabrina Carpenter’s site, and the bold, fashionable visuals from Lashon’s photos, we’ll produce a site that:
	•	Immediately showcases Lashon’s personality and style through vibrant hero images.
	•	Spotlights her music with prominent CTAs and embedded streaming.
	•	Shares her backstory in a concise, compelling way.
	•	Provides a visually immersive gallery for fans and industry professionals to explore.
	•	Invites engagement via sign-up forms, social links, and a contact page for bookings.

This design will serve as a powerful platform to introduce Lashon to the world and align visually with her dynamic musical persona.

================
File: docs/tech_stack_document.md
================
# Introduction

The Lashon.Music website project is an end-to-end online platform designed to showcase Lashon’s distinctive artistry, story, and music releases through a bold and modern aesthetic. Drawing inspiration from established designs such as Sabrina Carpenter’s site and utilizing Wix Template #2956, the project aims not only to present striking visual imagery—featuring high-quality photos of Lashon in a green dress, a backless black outfit, and a refined white piano ensemble—but also to drive user engagement and foster connections with fans and collaborators. The technology decisions made for this project support a clean, intuitive, and visually impactful user experience while allowing for future expansion such as adding events or a store.

# Frontend Technologies

For the front end, the project leverages Wix Template #2956 to create a visually appealing and user-friendly website. Wix provides built-in responsive design tools that ensure the site looks great on all devices, from desktops to mobile phones. In addition, modern design patterns inspired by creative tools like Lovable.dev and live coding assistance from platforms like Cursor and Windsurf help maintain a cohesive look that matches Lashon’s bold brand. This combination of visual templates and real-time coding support allows the team to implement high-quality imagery, custom layouts, and striking typography that enhance user engagement without overwhelming non-technical users.

# Backend Technologies

While Wix serves as the website’s backbone, the project integrates essential third-party backend services to support its functionalities. Backend support is achieved through built-in Wix capabilities paired with essential integrations such as Mailchimp or Constant Contact for newsletter sign-ups, and Google Analytics for monitoring site engagement and visitor behavior. These tools work together to ensure that music streaming links, contact forms, and newsletter integrations all function seamlessly, thus managing data and supporting the application’s overall functionality in a robust and secure manner.

# Infrastructure and Deployment

The website is built on Wix, which simplifies both infrastructure management and deployment. Wix handles hosting, content management, and mobile responsiveness without the need for complex server configurations. Additional tools like Bolt for AI-powered project scaffolding and established version control practices via integrated IDEs such as VS Code and Replit ensure that development is streamlined and that future updates can be implemented quickly and safely. This approach guarantees that the site remains reliable, scalable, and easy to update even as new features—like an events page or a merch store—are added later.

# Third-Party Integrations

To enhance functionality and extend the user experience, several third-party services are woven into the tech stack. Email marketing tools like Mailchimp or Constant Contact are integrated for managing fan newsletters and updates, ensuring visitors can easily stay in touch with Lashon’s latest news and releases. The site also makes use of embedded streaming services such as Spotify, Apple Music, and YouTube, which allow visitors to listen to and preview music directly on the site. For ongoing insights into visitor behavior, Google Analytics is included to track engagement metrics, while social media integrations, which may include an Instagram feed or direct link icons, connect the website to Lashon’s established online presence.

# Security and Performance Considerations

Security and performance have been central to the technology choices made for Lashon.Music. Wix’s secure hosting and HTTPS support ensure data protection during content delivery. For the contact forms, proper validation measures help safeguard against spam and potential injection attacks. Performance is also optimized by using high-quality yet web-optimized images and ensuring that all third-party integrations, such as streaming players and analytics tools, load efficiently. This careful balance of security and performance means visitors experience fast load times and a safe browsing environment, which in turn encourages prolonged engagement with the site.

# Conclusion and Overall Tech Stack Summary

The tech stack for the Lashon.Music website is designed to deliver a visually stunning and highly engaging user experience that aligns with Lashon’s distinctive artistic brand. By combining Wix’s responsive design template with supportive front-end tools like Lovable.dev and real-time coding assistance from Cursor and Windsurf, the website delivers crisp, bold visuals and intuitive navigation. On the backend, integrations with services such as Mailchimp, Google Analytics, and prominent music streaming platforms offer robust data management and interactive experiences. Meanwhile, the deployment approach via Wix paired with AI-powered scaffolding and version control tools ensures that the project is both secure and scalable. This thoughtful mix of technology choices not only meets the current needs of showcasing Lashon’s artistry and music but also lays a strong foundation for future expansion while remaining accessible and easy to manage for both technical and non-technical stakeholders.

================
File: docs/windsurf_file.md
================
# .windsurfrules

## Project Overview

*   **Type:** windsurf_file
*   **Description:** Below is a proposed end-to-end website design for Loshan.music—drawing visual inspiration from Sabrina Carpenter’s site and using the Wix Template https://www.wix.com/website-template/view/html/2956. The goal is to create a bold, modern aesthetic that highlights Lashon’s artistry, story, and new releases. The design utilizes striking imagery (green dresses, backless black outfits, and a refined white piano ensemble) alongside a streamlined version of her biography to drive engagement, expand her fan base, and facilitate collaborations.
*   **Primary Goal:** Increase music engagement by directing visitors to streaming platforms, gather newsletter sign-ups, promote merchandise and collaborations, and strengthen Lashon’s online presence via social media interactions.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   Wix Template https://www.wix.com/website-template/view/html/2956: Utilizes Wix’s built-in multi-page routing mechanism. Each page (Home, About, Music, Gallery, Contact) is defined within the Wix editor, foregoing traditional file-based routing.
    *   Example 1: Home Page → Configured as the landing page via Wix's visual editor.
    *   Example 2: About Page → Separate page managed through Wix, following a designated layout.
    *   Example 3: Music Page → Integrated with embedded streaming links and multimedia components via Wix's tools.

### Core Directories

*   **Versioned Structure:**

    *   assets/: Contains all versioned imagery and multimedia (e.g., green dress, backless black, white piano shots) to ensure a consistent visual theme.
    *   pages/: Houses the distinct content pages (Home, About, Music, Gallery, Contact) as defined within the Wix platform.

### Key Files

*   **Stack-Versioned Patterns:**

    *   index.html (Home Page): Represents the landing page with hero sections, CTAs, and release highlights within Wix’s structure.
    *   about.html (About Page): Showcases biographical content and supporting visuals.
    *   music.html (Music Page): Configured for featured music releases with embedded streaming links.
    *   gallery.html (Gallery Page): Displays a mosaic grid of curated images.
    *   contact.html (Contact Page): Contains the inquiry form and social media integrations.

## Tech Stack Rules

*   **Version Enforcement:**

    *   Wix Template https://www.wix.com/website-template/view/html/2956: Ensures adherence to a modern, responsive layout with integrated tools (Mailchimp/Constant Contact for newsletters, Google Analytics for tracking) without custom routing requirements.

## PRD Compliance

*   **Non-Negotiable:**

    *   "Lashon.Music is an end-to-end website built to showcase Lashon’s artistry, story, and musical releases with bold imagery and clear calls-to-action, adhering to a visual style inspired by Sabrina Carpenter’s site and configured using Wix Template https://www.wix.com/website-template/view/html/2956." : Every page must consistently follow the defined color palette (deep emerald green, gold accents, black/charcoal, off-white), typography guidelines, and responsive design features as outlined in the PRD.

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   Wix Template Navigation Flow → Home → About → Music → Gallery → Contact: Visitors start at a dynamic Home page featuring a hero section and latest release highlights; they wander to About for biographical insights; Music for direct engagement with streaming services; Gallery for visual storytelling; and Contact for inquiries and social media connectivity.

================
File: public/.nojekyll
================


================
File: public/manifest.json
================
{
  "name": "Lashon Music",
  "short_name": "Lashon",
  "description": "Miami-born artist Lashon fuses hip-hop, R&B, and soul into a powerful performance style.",
  "start_url": "/lashon-next",
  "scope": "/lashon-next/",
  "display": "standalone",
  "background_color": "#000000",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "/lashon-next/logo-portrait.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/lashon-next/logo-portrait.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ]
}

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/three-dots.svg
================
<!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->
<svg width="120" height="30" viewBox="0 0 120 30" xmlns="http://www.w3.org/2000/svg" fill="#fff">
    <circle cx="15" cy="15" r="15">
        <animate attributeName="r" from="15" to="15"
                 begin="0s" dur="0.8s"
                 values="15;9;15" calcMode="linear"
                 repeatCount="indefinite" />
        <animate attributeName="fill-opacity" from="1" to="1"
                 begin="0s" dur="0.8s"
                 values="1;.5;1" calcMode="linear"
                 repeatCount="indefinite" />
    </circle>
    <circle cx="60" cy="15" r="9" fill-opacity="0.3">
        <animate attributeName="r" from="9" to="9"
                 begin="0s" dur="0.8s"
                 values="9;15;9" calcMode="linear"
                 repeatCount="indefinite" />
        <animate attributeName="fill-opacity" from="0.5" to="0.5"
                 begin="0s" dur="0.8s"
                 values=".5;1;.5" calcMode="linear"
                 repeatCount="indefinite" />
    </circle>
    <circle cx="105" cy="15" r="15">
        <animate attributeName="r" from="15" to="15"
                 begin="0s" dur="0.8s"
                 values="15;9;15" calcMode="linear"
                 repeatCount="indefinite" />
        <animate attributeName="fill-opacity" from="1" to="1"
                 begin="0s" dur="0.8s"
                 values="1;.5;1" calcMode="linear"
                 repeatCount="indefinite" />
    </circle>
</svg>

================
File: public/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

================
File: src/app/about/page.tsx
================
import Story from '@/components/about/Story';

export const metadata = {
  title: 'About | Lashon',
  description: 'Learn about Lashon\'s journey from MVP athlete to rising music star.',
  themeColor: '#000000',
};

export default function AboutPage() {
  return (
    <main className="bg-black">
      <Story />
    </main>
  );
}

================
File: src/app/components/About/About.js
================
"use client";

import { useRef } from "react";
import { useInView } from "framer-motion";
import Image from "next/image";
import Container from "@/app/global-components/Container/Container";

export default function About() {
	const textRef = useRef(null);
	const isInView = useInView(textRef, { once: true });

	return (
		<section
			id="about"
			className={`relative flex flex-col items-center justify-end w-full mt-16 mx-auto max-w-[150rem] lg:flex-row lg:mt-56`}>
			<Container customClasses="lg:absolute lg:left-1/2 lg:-translate-x-1/2">
				<div
					className="relative flex flex-col lg:max-w-md xl:max-w-2xl 2xl:max-w-4xl"
					ref={textRef}
					style={{
						transform: isInView ? "none" : "translateX(-100px)",
						opacity: isInView ? 1 : 0,
						transition: "all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s",
					}}>
					<div className="overflow-hidden">
						<h2
							className={`font-bold text-6xl pb-6 translate-y-20 ${
								isInView ? "animate-slideUp" : ""
							}`}>
							About
						</h2>
					</div>

					<p>
						A Istanbul sono a casa, ho un passato e un futuro, ho un presente che è Dio, e fa la
						cameriera.
						<a
							className="text-yellow-btn-primary underline underline-offset-4 hover:text-yellow-600"
							href="https://www.paninopanini.co.uk/"
							target="_blank"
							rel="noreferrer">
							Ut labore et
						</a>
						dolore magna aliqua. Quis ipsum suspendisse ultrices gravida.
					</p>
					<p className="pt-8">
						Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
						<a
							className="text-yellow-btn-primary underline underline-offset-4 hover:text-yellow-600"
							href="https://www.paninopanini.co.uk/"
							target="_blank"
							rel="noreferrer">
							eiusmod tempor
						</a>
						. Chiudi un po&#8217; la finestra, mezzogiorno in penombra, sfondo bianco e pulito,
						sfondo bianco e pulito.
					</p>
					<div className="flex pt-8 gap-4">
						<svg
							fill="#1C2033"
							width="52"
							height="52"
							viewBox="0 0 64 64"
							xmlns="http://www.w3.org/2000/svg">
							<path d="M21.4016 56.7998C14.7016 56.7998 8.20156 54.8998 2.80156 51.1998C1.90156 50.5998 1.60156 49.4998 1.90156 48.4998C2.30156 47.4998 3.30156 46.8998 4.30156 47.0998C5.10156 47.1998 5.90156 47.2998 6.70156 47.2998C9.60156 47.2998 12.4016 46.6998 15.0016 45.5998C11.8016 43.9998 9.20156 41.1998 8.10156 37.5998C7.90156 36.8998 8.00156 36.1998 8.40156 35.5998C5.60156 32.9998 4.00156 29.3998 4.00156 25.4998V25.3998C4.00156 24.5998 4.40156 23.8998 5.10156 23.4998C5.20156 23.3998 5.30156 23.3998 5.40156 23.2998C4.50156 21.4998 4.00156 19.3998 4.00156 17.3998C4.00156 14.8998 4.60156 12.5998 5.80156 10.5998C6.20156 9.9998 6.80156 9.5998 7.60156 9.4998C8.30156 9.3998 9.10156 9.7998 9.50156 10.2998C14.3016 16.1998 21.2016 19.9998 28.6016 20.9998V20.8998C28.6016 13.3998 34.7016 7.2998 42.2016 7.2998C45.5016 7.2998 48.6016 8.4998 51.1016 10.6998C52.2016 10.2998 53.4016 9.4998 54.6016 8.7998C55.2016 8.3998 55.8016 7.9998 56.4016 7.6998C57.1016 7.2998 58.0016 7.2998 58.8016 7.7998C59.6016 8.2998 59.9016 9.0998 59.8016 9.8998C59.7016 10.4998 59.5016 11.8998 59.1016 13.3998C59.3016 13.3998 59.4016 13.3998 59.5016 13.3998C60.4016 13.1998 61.3016 13.5998 61.8016 14.3998C62.3016 15.1998 62.3016 16.0998 61.8016 16.8998C60.4016 18.9998 58.3016 20.3998 56.4016 21.6998C56.2016 21.7998 56.0016 21.9998 55.9016 22.0998C55.9016 22.1998 55.9016 22.2998 55.9016 22.3998C56.0016 39.1998 43.0016 56.7998 21.4016 56.7998ZM12.8016 50.9998C15.5016 51.7998 18.4016 52.1998 21.4016 52.1998C40.2016 52.1998 51.5016 36.8998 51.5016 22.0998C51.5016 21.6998 51.5016 21.2998 51.5016 20.8998C51.4016 20.0998 51.7016 19.2998 52.4016 18.7998C52.9016 18.3998 53.5016 17.9998 54.0016 17.5998C54.3016 17.3998 54.6016 17.1998 54.9016 16.9998C54.4016 16.7998 54.0016 16.2998 53.8016 15.7998C53.6016 15.2998 53.6016 14.6998 53.8016 14.1998C52.9016 14.5998 52.0016 14.8998 51.1016 15.0998C50.4016 15.1998 49.6016 14.9998 49.1016 14.3998C47.3016 12.4998 45.0016 11.4998 42.5016 11.4998C37.5016 11.4998 33.4016 15.5998 33.4016 20.5998C33.4016 21.1998 33.5016 21.8998 33.6016 22.6998C33.7016 23.3998 33.6016 24.0998 33.1016 24.5998C32.6016 25.0998 32.0016 25.3998 31.3016 25.3998C22.8016 24.9998 14.8016 21.4998 8.80156 15.5998C8.70156 16.0998 8.70156 16.5998 8.70156 17.0998C8.70156 20.1998 10.2016 22.9998 12.8016 24.6998C13.6016 25.2998 14.0016 26.2998 13.7016 27.2998C13.4016 28.2998 12.5016 28.8998 11.5016 28.8998C10.8016 28.8998 10.0016 28.7998 9.30156 28.5998C10.4016 31.3998 12.9016 33.5998 16.0016 34.1998C17.0016 34.3998 17.8016 35.2998 17.8016 36.3998C17.8016 37.4998 17.1016 38.3998 16.1016 38.5998C15.5016 38.7998 14.8016 38.8998 14.3016 38.9998C16.0016 40.9998 18.4016 42.1998 21.1016 42.1998C22.1016 42.1998 22.9016 42.7998 23.2016 43.6998C23.5016 44.5998 23.2016 45.5998 22.4016 46.1998C19.3016 48.5998 16.2016 50.1998 12.8016 50.9998Z" />
						</svg>
						<svg
							fill="#1C2033"
							width="52"
							height="52"
							viewBox="0 0 64 64"
							xmlns="http://www.w3.org/2000/svg">
							<path d="M62.9 19.2C62.8 16 62.2 13.7 61.5 11.6C60.8 9.5 59.7 7.8 58 6.1C56.3 4.4 54.6 3.4 52.6 2.6C50.6 1.8 48.4 1.3 45 1.2C41.5 1 40.5 1 32 1C23.5 1 22.6 1 19.2 1.1C15.8 1.2 13.7 1.8 11.6 2.5C9.5 3.2 7.8 4.4 6.1 6.1C4.4 7.8 3.3 9.5 2.6 11.6C1.8 13.6 1.3 15.8 1.2 19.2C1.1 22.6 1 23.5 1 32C1 40.5 1 41.4 1.1 44.8C1.2 48.2 1.8 50.3 2.5 52.4C3.2 54.5 4.3 56.2 6 57.9C7.7 59.6 9.5 60.7 11.5 61.4C13.5 62.1 15.7 62.7 19.1 62.8C22.5 63 23.4 63 31.9 63C40.4 63 41.3 63 44.7 62.9C48.1 62.8 50.2 62.2 52.3 61.5C54.4 60.8 56.1 59.7 57.8 58C59.5 56.3 60.6 54.5 61.3 52.5C62 50.5 62.6 48.3 62.7 44.9C62.8 41.7 62.8 40.7 62.8 32.2C62.8 23.7 63 22.6 62.9 19.2ZM57.3 44.5C57.2 47.5 56.6 49.1 56.2 50.3C55.6 51.7 54.9 52.8 53.8 53.8C52.7 54.9 51.7 55.5 50.3 56.2C49.2 56.6 47.6 57.2 44.5 57.3C41.3 57.3 40.3 57.3 32.1 57.3C23.9 57.3 22.8 57.3 19.6 57.2C16.6 57.1 15 56.5 13.8 56.1C12.4 55.5 11.3 54.8 10.3 53.7C9.2 52.6 8.6 51.6 7.9 50.2C7.5 49.1 6.9 47.5 6.8 44.4C6.8 41.3 6.8 40.3 6.8 32C6.8 23.7 6.8 22.7 6.9 19.5C7 16.5 7.6 14.9 8 13.7C8.6 12.3 9.3 11.2 10.3 10.2C11.4 9.1 12.4 8.5 13.8 7.9C14.9 7.5 16.5 6.9 19.6 6.8C22.8 6.7 23.8 6.7 32.1 6.7C40.4 6.7 41.4 6.7 44.6 6.8C47.6 6.9 49.2 7.5 50.4 7.9C51.8 8.5 52.9 9.2 53.9 10.2C55 11.3 55.6 12.3 56.3 13.7C56.7 14.8 57.3 16.4 57.4 19.5C57.5 22.7 57.5 23.7 57.5 32C57.5 40.3 57.4 41.3 57.3 44.5Z" />
							<path d="M32.0016 16.0996C23.1016 16.0996 16.1016 23.2996 16.1016 31.9996C16.1016 40.8996 23.3016 47.8996 32.0016 47.8996C40.7016 47.8996 48.0016 40.8996 48.0016 31.9996C48.0016 23.0996 40.9016 16.0996 32.0016 16.0996ZM32.0016 42.3996C26.2016 42.3996 21.6016 37.6996 21.6016 31.9996C21.6016 26.2996 26.3016 21.5996 32.0016 21.5996C37.8016 21.5996 42.4016 26.1996 42.4016 31.9996C42.4016 37.7996 37.8016 42.3996 32.0016 42.3996Z" />
							<path d="M48.7 19.1002C50.7435 19.1002 52.4 17.4436 52.4 15.4002C52.4 13.3567 50.7435 11.7002 48.7 11.7002C46.6565 11.7002 45 13.3567 45 15.4002C45 17.4436 46.6565 19.1002 48.7 19.1002Z" />
						</svg>
					</div>
				</div>
			</Container>
			<Image
				className="w-full mt-5 max-h-96 object-cover lg:mt-0 lg:max-h-none lg:max-w-lg lg:block xl:max-w-xl"
				src="/about.jpg"
				width={750}
				height={533}
				alt="Holding guitar"
			/>
		</section>
	);
}

================
File: src/app/components/BackToTop/BackToTop.js
================
export default function BackToTop({ customClasses }) {
	const clickHandler = () => {
		window.scrollTo({
			top: 0,
			behavior: "smooth",
		});
	};
	return (
		<div
			className={`fixed bottom-2 border-solid border-2 border-white rounded right-2 bg-fluo-green p-3.5 z-[99] opacity-90 cursor-pointer before:absolute before:-translate-x-1/2 before:-translate-y-1/2 before:top-[35%] before:left-[50%] before:content-[''] before:w-0 before:h-[1px] before:border-solid before:border-8 before:border-x-transparent before:border-t-transparent before:border-b-black${
				customClasses ? ` ${customClasses}` : ""
			}`}
			onClick={clickHandler}></div>
	);
}

================
File: src/app/components/BandIdentity/BandIdentity.js
================
"use client";

import Image from "next/image";
import Container from "@/app/global-components/Container/Container";
import ButtonPrimary from "@/app/global-components/ButtonPrimary/ButtonPrimary";
import NewAlbum from "../NewAlbum/NewAlbum";
import ScrollTo from "@/app/global-components/ScrollTo/ScrollTo";

export default function BandIdentity() {
	return (
		<>
			<div className="w-full py-3 z-50 lg:hidden">
				<Container customClasses="px-2.5 flex items-center justify-between font-sm">
					<Image className="max-w-[6rem] h-auto " src="/logo-portrait.png" width={324} height={236} alt="Panic Panini logo" />
					<ScrollTo toId="shows" duration={1500}>
						<ButtonPrimary customClasses="text-sm">Live gigs</ButtonPrimary>
					</ScrollTo>
				</Container>
			</div>
			<div className="hidden h-full flex-col justify-between grow-0 shrink-0 bg-black z-10 bg-opacity-30 lg:flex">
				<div className="logo-container border-y-[1.25rem] border-fluo-green py-4 opacity-1">
					<Image className="px-12 py-3 max-w-[18.75rem] h-auto" src="/logo-portrait.png" width={324} height={236} alt="Panic Panini logo" />
				</div>
				<NewAlbum />
			</div>
		</>
	);
}

================
File: src/app/components/ContactUs/ContactUs.js
================
"use client";

import { useRef } from "react";
import { useInView } from "framer-motion";
import Image from "next/image";
import Container from "@/app/global-components/Container/Container";
import ContactForm from "@/app/global-components/ContactForm/ContactForm";

export default function ContactUs() {
	const textRef = useRef(null);
	const isInView = useInView(textRef, { once: true });

	return (
		<section
			id="contacts"
			className={`relative flex flex-col-reverse items-center w-full mt-16 mx-auto max-w-[150rem] lg:mt-56 lg:flex-row`}>
			<Image
				className="mt-5 max-h-96 object-cover lg:mt-0 lg:max-h-none lg:max-w-lg lg:block xl:max-w-xl"
				src="/contacts.jpg"
				width={750}
				height={533}
				alt="Band playing"
			/>
			<Container customClasses="flex flex-col overflow-hidden lg:items-end lg:justify-end lg:absolute lg:left-1/2 lg:-translate-x-1/2">
				<div
					className="flex justify-end flex-col lg:items-end lg:max-w-md xl:max-w-2xl 2xl:max-w-4xl"
					ref={textRef}
					style={{
						transform: isInView ? "none" : "translateX(100px)",
						opacity: isInView ? 1 : 0,
						transition: "all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s",
					}}>
					<div className="flex flex-col max-w-4xl lg:text-right">
						<div className="overflow-hidden">
							<h2
								className={`font-bold text-6xl pb-6 translate-y-24 ${
									isInView ? "animate-slideUp" : ""
								}`}>
								Contact us
							</h2>
						</div>
						<p>
							And get us a drink in case you around. <br></br>Email us at{" "}
							<a
								className="text-yellow-btn-primary underline underline-offset-4 hover:text-yellow-600"
								href="https://www.paninopanini.co.uk/"
								target="_blank"
								rel="noreferrer">
								{" "}
								hello@panicpanini.com{" "}
							</a>{" "}
							or fill the form below.
						</p>
					</div>
					<ContactForm />
				</div>
			</Container>
		</section>
	);
}

================
File: src/app/components/Footer/Footer.js
================
import Container from "@/app/global-components/Container/Container";
import SubscribeForm from "@/app/global-components/SubscribeForm/SubscribeForm";
import Image from "next/image";

export default function Footer() {
	return (
		<section id="footer" className="bg-black w-full lg:fixed lg:bottom-0 lg:z-[-1] lg:h-[23rem]">
			<footer className="w-full">
				<div className=" py-16">
					<Container customClasses="flex flex-col lg:items-center lg:flex-row">
						<div className="basis-2/3 text-white">
							<h3 className="text-5xl font-bold">Subscribe</h3>
							<p>To our newsletter to get the latest updates and live gigs info.</p>
						</div>
						<div className="flex items-cente w-full mt-2.5 lg:mt-0 lg:basis-1/3 lg:justify-end">
							<SubscribeForm />
						</div>
					</Container>
				</div>
				<div className="bg-fluo-green pt-3 relative z-[100]">
					<Container customClasses="flex justify-between items-center">
						<Image className="max-w-[10rem] lg:max-w-[15rem] h-auto" src="/logo-landscape.png" width={815} height={144} alt="Footer logo" />
						<div className="flex gap-3 md:gap-4">
							<svg fill="#FFFFFF" className="max-w-[1.5rem] h-auto lg:max-w-none" width="52" height="52" id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 51.71 51.71">
								<path d="m33.31,22.59h-4v-5.37h3.26c.58,0,1.05-.42,1.05-1.05v-5.58c0-.58-.42-1.05-1.05-1.05h-3.84c-4.16,0-7.05,2.95-7.05,7.31v5.63h-4.63c-.74,0-1.42.58-1.42,1.42v3.79c0,.74.58,1.42,1.42,1.42h4.52v11.63c0,.74.58,1.42,1.42,1.42h4.94c.32,0,.58-.16.79-.37s.37-.58.37-.89v-11.73h3.47c.68,0,1.21-.42,1.32-1.05v-.11l.74-3.63c.05-.37,0-.79-.32-1.21-.11-.26-.58-.53-1-.58Z" />
								<path d="m25.85,51.71C11.6,51.71,0,40.11,0,25.85S11.6,0,25.85,0s25.85,11.6,25.85,25.85-11.6,25.85-25.85,25.85Zm0-46.58C14.42,5.13,5.13,14.42,5.13,25.85s9.3,20.73,20.73,20.73,20.73-9.3,20.73-20.73S37.28,5.13,25.85,5.13Z" />
							</svg>
							<svg fill="#FFFFFF" className="max-w-[1.5rem] h-auto lg:max-w-none" width="52" height="52" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
								<path d="M21.4016 56.7998C14.7016 56.7998 8.20156 54.8998 2.80156 51.1998C1.90156 50.5998 1.60156 49.4998 1.90156 48.4998C2.30156 47.4998 3.30156 46.8998 4.30156 47.0998C5.10156 47.1998 5.90156 47.2998 6.70156 47.2998C9.60156 47.2998 12.4016 46.6998 15.0016 45.5998C11.8016 43.9998 9.20156 41.1998 8.10156 37.5998C7.90156 36.8998 8.00156 36.1998 8.40156 35.5998C5.60156 32.9998 4.00156 29.3998 4.00156 25.4998V25.3998C4.00156 24.5998 4.40156 23.8998 5.10156 23.4998C5.20156 23.3998 5.30156 23.3998 5.40156 23.2998C4.50156 21.4998 4.00156 19.3998 4.00156 17.3998C4.00156 14.8998 4.60156 12.5998 5.80156 10.5998C6.20156 9.9998 6.80156 9.5998 7.60156 9.4998C8.30156 9.3998 9.10156 9.7998 9.50156 10.2998C14.3016 16.1998 21.2016 19.9998 28.6016 20.9998V20.8998C28.6016 13.3998 34.7016 7.2998 42.2016 7.2998C45.5016 7.2998 48.6016 8.4998 51.1016 10.6998C52.2016 10.2998 53.4016 9.4998 54.6016 8.7998C55.2016 8.3998 55.8016 7.9998 56.4016 7.6998C57.1016 7.2998 58.0016 7.2998 58.8016 7.7998C59.6016 8.2998 59.9016 9.0998 59.8016 9.8998C59.7016 10.4998 59.5016 11.8998 59.1016 13.3998C59.3016 13.3998 59.4016 13.3998 59.5016 13.3998C60.4016 13.1998 61.3016 13.5998 61.8016 14.3998C62.3016 15.1998 62.3016 16.0998 61.8016 16.8998C60.4016 18.9998 58.3016 20.3998 56.4016 21.6998C56.2016 21.7998 56.0016 21.9998 55.9016 22.0998C55.9016 22.1998 55.9016 22.2998 55.9016 22.3998C56.0016 39.1998 43.0016 56.7998 21.4016 56.7998ZM12.8016 50.9998C15.5016 51.7998 18.4016 52.1998 21.4016 52.1998C40.2016 52.1998 51.5016 36.8998 51.5016 22.0998C51.5016 21.6998 51.5016 21.2998 51.5016 20.8998C51.4016 20.0998 51.7016 19.2998 52.4016 18.7998C52.9016 18.3998 53.5016 17.9998 54.0016 17.5998C54.3016 17.3998 54.6016 17.1998 54.9016 16.9998C54.4016 16.7998 54.0016 16.2998 53.8016 15.7998C53.6016 15.2998 53.6016 14.6998 53.8016 14.1998C52.9016 14.5998 52.0016 14.8998 51.1016 15.0998C50.4016 15.1998 49.6016 14.9998 49.1016 14.3998C47.3016 12.4998 45.0016 11.4998 42.5016 11.4998C37.5016 11.4998 33.4016 15.5998 33.4016 20.5998C33.4016 21.1998 33.5016 21.8998 33.6016 22.6998C33.7016 23.3998 33.6016 24.0998 33.1016 24.5998C32.6016 25.0998 32.0016 25.3998 31.3016 25.3998C22.8016 24.9998 14.8016 21.4998 8.80156 15.5998C8.70156 16.0998 8.70156 16.5998 8.70156 17.0998C8.70156 20.1998 10.2016 22.9998 12.8016 24.6998C13.6016 25.2998 14.0016 26.2998 13.7016 27.2998C13.4016 28.2998 12.5016 28.8998 11.5016 28.8998C10.8016 28.8998 10.0016 28.7998 9.30156 28.5998C10.4016 31.3998 12.9016 33.5998 16.0016 34.1998C17.0016 34.3998 17.8016 35.2998 17.8016 36.3998C17.8016 37.4998 17.1016 38.3998 16.1016 38.5998C15.5016 38.7998 14.8016 38.8998 14.3016 38.9998C16.0016 40.9998 18.4016 42.1998 21.1016 42.1998C22.1016 42.1998 22.9016 42.7998 23.2016 43.6998C23.5016 44.5998 23.2016 45.5998 22.4016 46.1998C19.3016 48.5998 16.2016 50.1998 12.8016 50.9998Z" />
							</svg>
							<svg fill="#FFFFFF" className="max-w-[1.5rem] h-auto lg:max-w-none" width="52" height="52" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
								<path d="M62.9 19.2C62.8 16 62.2 13.7 61.5 11.6C60.8 9.5 59.7 7.8 58 6.1C56.3 4.4 54.6 3.4 52.6 2.6C50.6 1.8 48.4 1.3 45 1.2C41.5 1 40.5 1 32 1C23.5 1 22.6 1 19.2 1.1C15.8 1.2 13.7 1.8 11.6 2.5C9.5 3.2 7.8 4.4 6.1 6.1C4.4 7.8 3.3 9.5 2.6 11.6C1.8 13.6 1.3 15.8 1.2 19.2C1.1 22.6 1 23.5 1 32C1 40.5 1 41.4 1.1 44.8C1.2 48.2 1.8 50.3 2.5 52.4C3.2 54.5 4.3 56.2 6 57.9C7.7 59.6 9.5 60.7 11.5 61.4C13.5 62.1 15.7 62.7 19.1 62.8C22.5 63 23.4 63 31.9 63C40.4 63 41.3 63 44.7 62.9C48.1 62.8 50.2 62.2 52.3 61.5C54.4 60.8 56.1 59.7 57.8 58C59.5 56.3 60.6 54.5 61.3 52.5C62 50.5 62.6 48.3 62.7 44.9C62.8 41.7 62.8 40.7 62.8 32.2C62.8 23.7 63 22.6 62.9 19.2ZM57.3 44.5C57.2 47.5 56.6 49.1 56.2 50.3C55.6 51.7 54.9 52.8 53.8 53.8C52.7 54.9 51.7 55.5 50.3 56.2C49.2 56.6 47.6 57.2 44.5 57.3C41.3 57.3 40.3 57.3 32.1 57.3C23.9 57.3 22.8 57.3 19.6 57.2C16.6 57.1 15 56.5 13.8 56.1C12.4 55.5 11.3 54.8 10.3 53.7C9.2 52.6 8.6 51.6 7.9 50.2C7.5 49.1 6.9 47.5 6.8 44.4C6.8 41.3 6.8 40.3 6.8 32C6.8 23.7 6.8 22.7 6.9 19.5C7 16.5 7.6 14.9 8 13.7C8.6 12.3 9.3 11.2 10.3 10.2C11.4 9.1 12.4 8.5 13.8 7.9C14.9 7.5 16.5 6.9 19.6 6.8C22.8 6.7 23.8 6.7 32.1 6.7C40.4 6.7 41.4 6.7 44.6 6.8C47.6 6.9 49.2 7.5 50.4 7.9C51.8 8.5 52.9 9.2 53.9 10.2C55 11.3 55.6 12.3 56.3 13.7C56.7 14.8 57.3 16.4 57.4 19.5C57.5 22.7 57.5 23.7 57.5 32C57.5 40.3 57.4 41.3 57.3 44.5Z" />
								<path d="M32.0016 16.0996C23.1016 16.0996 16.1016 23.2996 16.1016 31.9996C16.1016 40.8996 23.3016 47.8996 32.0016 47.8996C40.7016 47.8996 48.0016 40.8996 48.0016 31.9996C48.0016 23.0996 40.9016 16.0996 32.0016 16.0996ZM32.0016 42.3996C26.2016 42.3996 21.6016 37.6996 21.6016 31.9996C21.6016 26.2996 26.3016 21.5996 32.0016 21.5996C37.8016 21.5996 42.4016 26.1996 42.4016 31.9996C42.4016 37.7996 37.8016 42.3996 32.0016 42.3996Z" />
								<path d="M48.7 19.1002C50.7435 19.1002 52.4 17.4436 52.4 15.4002C52.4 13.3567 50.7435 11.7002 48.7 11.7002C46.6565 11.7002 45 13.3567 45 15.4002C45 17.4436 46.6565 19.1002 48.7 19.1002Z" />
							</svg>
						</div>
					</Container>
					<div className="bg-black text-white mt-2 py-2">
						<p className="text-[0.7rem] text-center leading-tight mb-1">
							Website powered by{" "}
							<a className="text-yellow-btn-primary underline underline-offset-4 hover:text-yellow-600" href="https://www.paninopanini.co.uk/" target="_blank" rel="noreferrer">
								Panino Panini
							</a>{" "}
							😎
						</p>
					</div>
				</div>
			</footer>
		</section>
	);
}

================
File: src/app/components/IntroTourDates/IntroTourDates.js
================
"use client";

import { useRef } from "react";
import { useInView } from "framer-motion";
import ScrollTo from "@/app/global-components/ScrollTo/ScrollTo";
import ButtonPrimary from "@/app/global-components/ButtonPrimary/ButtonPrimary";
import { MapMapper, Github } from "@/app/svg-icons/svg-icons";

const observerOptions = {
	rootMargin: "0px",
	threshold: 0.3,
};

const tourDates = [
	{
		id: 1,
		date: "19 Oct",
		dayTime: "Friday 20.30 - 23.00",
		venue: "The O2, Isla Square",
		city: "London",
	},
	{
		id: 2,
		date: "22 Nov",
		dayTime: "Wednesday 20.00 - 22.00",
		venue: "Roundhouse, Chalk Bag Rd",
		city: "Rome",
	},
	{
		id: 3,
		date: "10 Dec",
		dayTime: "Saturday 20.00 - 22.00",
		venue: "200 Camden High St",
		city: "New York",
	},
];

export default function IntroTourDates() {
	const sectionRef = useRef(null);
	const isInView = useInView(sectionRef, { once: true });
	return (
		<div
			className={`flex flex-col justify-center items-center lg:justify-end lg:items-end`}
			style={{
				transform: isInView ? "none" : "translateY(-100px)",
				opacity: isInView ? 1 : 0,
				transition: "all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s",
			}}
			ref={sectionRef}>
			<h2 className="text-white font-permanentMarker text-2xl md:text-3xl lg:text-4xl">
				⚡ Free Template ⚡
			</h2>
			<ul className="list-none">
				{tourDates.map((gig) => {
					return (
						<li
							key={gig.id}
							className="flex items-center my-10 justify-between text-xl md:justify-end md:text-2xl lg:text-2xl xl:text-3xl">
							<div className="flex flex-col justify-center items-center date w-[4.7rem] h-[4.7rem] p-2 bg-fluo-green mr-4 text-2xl rounded-md border-8 border-white md:mr-12 lg:w-[5.5rem] lg:h-[5.5rem]">
								<p className="font-bold text-xl text-[#6f705f] leading-none text-center uppercase lg:text-3xl">
									{gig.date}
								</p>
							</div>
							<div className="text-white text-right leading-none md:mr-12">
								<p>{gig.dayTime}</p>
								<p>{gig.venue}</p>
								<div className="flex justify-end md:hidden">
									<MapMapper extraClasses="fill-amber-400 mr-2" />
									<p>{gig.city}</p>
								</div>
							</div>
							<div className="hidden text-right text-white leading-none md:flex">
								<MapMapper extraClasses="fill-amber-400 mr-2" />
								<p>{gig.city}</p>
							</div>
						</li>
					);
				})}
			</ul>
			<div className="gap-x-3 lg:flex">
				<a href="https://github.com/stefanogali/panic-panini-next" target="_blank" rel="noreferrer">
					<ButtonPrimary customClasses="flex items-center gap-x-1 text-sm my-3 lg:text-base lg:mb-0">
						<Github extraClasses="w-3 h-auto fill-white lg:w-5" />
						Github Repo
					</ButtonPrimary>
				</a>
				<div className="hidden lg:block">
					<ScrollTo toId="shows" duration={1500}>
						<ButtonPrimary>Find out more</ButtonPrimary>
					</ScrollTo>
				</div>
			</div>
		</div>
	);
}

================
File: src/app/components/Listen/Listen.js
================
"use client";

import { useRef } from "react";
import { useInView } from "framer-motion";
import Container from "@/app/global-components/Container/Container";
import { Spotify, SoundCloud, Youtube, AppleMusic } from "@/app/svg-icons/svg-icons";
import AudioPlayer from "@/app/global-components/AudioPlayer/AudioPlayer";

export default function Listen() {
	const textRef = useRef(null);
	const isInView = useInView(textRef, { once: true });

	return (
		<section id="listen" className={`w-full mt-16 lg:mt-56`}>
			<Container customClasses="flex flex-col lg:flex-row">
				<div
					className="flex flex-col justify-center basis-2/4 lg:max-w-lg xl:max-w-2xl 2xl:max-w-4xl"
					ref={textRef}
					style={{
						transform: isInView ? "none" : "translateX(-100px)",
						opacity: isInView ? 1 : 0,
						transition: "all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s",
					}}>
					<p>Listen to the new album:</p>
					<div className="overflow-hidden">
						<h2
							className={`font-bold text-6xl pb-6 translate-y-36 md:translate-y-24 ${
								isInView ? "animate-slideUp" : ""
							}`}>
							Panic in the room
						</h2>
					</div>
					<p>
						Dovrebbero seguire le mie voglie, la sera appena alzato, o tardi la mattina dopo la
						colazione, prima d&#8217;addormentarmi.
					</p>
					<div className="flex items-center pt-4 gap-4">
						<Spotify />
						<SoundCloud />
						<Youtube />
						<AppleMusic />
					</div>
				</div>
				<div className="flex items-center justify-center pt-5 basis-2/4 mt-20 lg:mt-0 lg:justify-end lg:pt-[60px]">
					<AudioPlayer />
				</div>
			</Container>
		</section>
	);
}

================
File: src/app/components/NewAlbum/NewAlbum.js
================
import { useRef } from "react";
import { useInView } from "framer-motion";

export default function NewAlbum({ customClasses }) {
	const comingSoonRef = useRef(null);
	const isInView = useInView(comingSoonRef, { once: true });
	return (
		<div
			className={`flex flex-col items-center justify-center p-4${
				customClasses ? ` ${customClasses}` : ""
			}`}
			ref={comingSoonRef}
			style={{
				transform: isInView ? "none" : "translateX(-100px)",
				opacity: isInView ? 1 : 0,
				transition: "all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s",
			}}>
			<h4 className="text-white font-permanentMarker text-xl">New Album</h4>
			<h4 className="text-white font-rockSalt text-xl">Panic in the room</h4>
			<p className="text-fluo-green text-base">Coming out on 15th December</p>
		</div>
	);
}

================
File: src/app/components/PhotoGallery/PhotoGallery.js
================
"use client";

import { useState, useRef } from "react";
import { useInView } from "framer-motion";
import Lightbox from "yet-another-react-lightbox";
import "yet-another-react-lightbox/styles.css";
import Image from "next/image";
import Container from "@/app/global-components/Container/Container";
import { MapMapper, Calendar } from "@/app/svg-icons/svg-icons";

const galleryThumbnails = [
	{
		id: 1,
		src: "/gallery/thumbnails/thumbnail-1.jpg",
		club: "The Golden Eagle.",
		city: "Miami",
		date: "12/2/2021",
		slides: [
			{ src: "/gallery/slider-images/slider-1.jpg" },
			{ src: "/gallery/slider-images/slider-2.jpg" },
			{ src: "/gallery/slider-images/slider-3.jpg" },
		],
	},
	{
		id: 2,
		src: "/gallery/thumbnails/thumbnail-2.jpg",
		club: "The Silver Elephant.",
		city: "Atlanta",
		date: "23/6/2019",
		slides: [
			{ src: "/gallery/slider-images/slider-4.jpg" },
			{ src: "/gallery/slider-images/slider-5.jpg" },
			{ src: "/gallery/slider-images/slider-6.jpg" },
		],
	},
	{
		id: 3,
		src: "/gallery/thumbnails/thumbnail-3.jpg",
		club: "The Electric Fox.",
		city: "Los Angeles",
		date: "11/3/2019",
		slides: [
			{ src: "/gallery/slider-images/slider-7.jpg" },
			{ src: "/gallery/slider-images/slider-8.jpg" },
			{ src: "/gallery/slider-images/slider-9.jpg" },
		],
	},
	{
		id: 4,
		src: "/gallery/thumbnails/thumbnail-4.jpg",
		club: "The Cool Mouse.",
		city: "New York",
		date: "03/12/2018",
		slides: [
			{ src: "/gallery/slider-images/slider-10.jpg" },
			{ src: "/gallery/slider-images/slider-11.jpg" },
			{ src: "/gallery/slider-images/slider-12.jpg" },
		],
	},
	{
		id: 5,
		src: "/gallery/thumbnails/thumbnail-5.jpg",
		club: "The Super Cat.",
		city: "Rome",
		date: "03/03/2018",
		slides: [
			{ src: "/gallery/slider-images/slider-13.jpg" },
			{ src: "/gallery/slider-images/slider-14.jpg" },
			{ src: "/gallery/slider-images/slider-15.jpg" },
		],
	},
	{
		id: 6,
		src: "/gallery/thumbnails/thumbnail-6.jpg",
		club: "The Brave Salmon.",
		city: "Berlin",
		date: "25/12/2017",
		slides: [
			{ src: "/gallery/slider-images/slider-16.jpg" },
			{ src: "/gallery/slider-images/slider-17.jpg" },
			{ src: "/gallery/slider-images/slider-18.jpg" },
		],
	},
];

export default function PhotoGallery() {
	const [openGallery, setOpenGallery] = useState(false);
	const [galleryIndex, setGalleryIndex] = useState(0);
	const sectionRef = useRef(null);
	const isInView = useInView(sectionRef, { once: true });

	const clickHandler = (index) => {
		setOpenGallery(true);
		setGalleryIndex(index);
	};

	return (
		<section
			id="photo-gallery"
			className={`w-full mt-16 pb-14 lg:mt-56 lg:pb-56 lg:mb-[22.5rem]`}
			style={{
				transform: isInView ? "none" : "translateY(100px)",
				opacity: isInView ? 1 : 0,
				transition: "all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s",
			}}
			ref={sectionRef}>
			<Container>
				<div className="overflow-hidden">
					<h2
						className={`font-bold text-6xl pb-6 translate-y-24 ${
							isInView ? "animate-slideUp" : ""
						}`}>
						Gallery
					</h2>
				</div>
				<p>Past shows.</p>
				<div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-5">
					{galleryThumbnails.map((item, index) => {
						return (
							<div className="flex flex-col mb-5 leading-none" key={item.id}>
								<div className="w-full h-full rounded-lg bg-fluo-green transition-all">
									<Image
										className="rounded-lg cursor-pointer hover:opacity-60 transition-all"
										src={item.src}
										width={400}
										height={400}
										alt="Gallery gig thumbnail"
										onClick={() => clickHandler(index)}
									/>
								</div>
								<h5 className="text-sm md:text-lg xl:text-xl font-medium">{item.club}</h5>
								<span className="flex">
									<MapMapper />
									<h5 className="ml-2 text-sm md:text-lg">{item.city}</h5>
								</span>
								<span className="flex">
									<Calendar />
									<h5 className="ml-2 text-sm md:text-lg">{item.date}</h5>
								</span>
							</div>
						);
					})}
					<Lightbox
						open={openGallery}
						close={() => setOpenGallery(false)}
						slides={galleryThumbnails[galleryIndex].slides}
					/>
				</div>
			</Container>
		</section>
	);
}

================
File: src/app/components/Shows/Shows.js
================
"use client";

import { useRef, useEffect, useState } from "react";
import { useInView } from "framer-motion";
import Container from "@/app/global-components/Container/Container";
import TourDates from "../TourDates/TourDates";
import { ArrowBottom } from "@/app/svg-icons/svg-icons";

export default function Shows() {
	const [isScrollMoreVisible, setIsScrollMoreVisible] = useState(true);
	const showsContainerRef = useRef(null);
	const scrollableDivRef = useRef(null);
	const isInView = useInView(showsContainerRef, { once: true });

	const clickHandler = () => {
		scrollableDivRef.current.scrollTo({
			top: scrollableDivRef.current.scrollTop + scrollableDivRef.current.offsetHeight,
			behavior: "smooth",
		});
	};

	useEffect(() => {
		const scrollableDiv = scrollableDivRef.current;
		const handleScroll = () => {
			if (
				scrollableDiv.scrollTop +
					scrollableDiv.offsetHeight +
					scrollableDivRef.current.childNodes[0].children[0].offsetHeight >=
				scrollableDiv.scrollHeight
			) {
				setIsScrollMoreVisible(false);
			} else {
				setIsScrollMoreVisible(true);
			}
		};

		scrollableDiv.addEventListener("scroll", handleScroll);

		return () => {
			scrollableDiv.removeEventListener("scroll", handleScroll);
		};
	}, [scrollableDivRef]);

	return (
		<section
			id="shows"
			className={`w-full relative mt-16 bg-incoming-shows bg-cover bg-no-repeat bg-center h-[32rem] lg:h-screen lg:min-h-[45rem] lg:max-h-[49rem] lg:mt-56`}
			style={{
				transform: isInView ? "none" : "translateY(100px)",
				opacity: isInView ? 1 : 0,
				transition: "all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s",
			}}
			ref={showsContainerRef}>
			<Container customClasses="pb-2.5 h-full">
				<div className="flex flex-col items-center text-white pt-11">
					<div className="overflow-hidden">
						<h2
							className={`text-2xl translate-y-10 font-bold lg:text-4xl lg:translate-y-20 lg:leading-[3rem] ${
								isInView ? "animate-slideUp" : ""
							}`}>
							Incoming Shows &#127928;
						</h2>
					</div>
					<h4 className="text-base lg:text-2xl">We playin{`’`} in your town!</h4>
				</div>
				<div
					className="scoller relative mt-6 h-[calc(100%-14rem)] overflow-hidden overflow-y-auto no-scrollbar"
					ref={scrollableDivRef}>
					<TourDates />
				</div>

				<div
					className={`absolute bottom-5 left-1/2 -translate-x-1/2 flex flex-col items-center justify-center transition${
						!isScrollMoreVisible ? " opacity-0" : ""
					}`}
					onClick={clickHandler}>
					<p className="text-yellow-btn-primary text-sm underline cursor-pointer">Show more</p>
					<ArrowBottom />
				</div>
			</Container>
			<div className="absolute w-full h-full top-0 left-0 bg-hero-pattern bg-repeat z-[-1]"></div>
		</section>
	);
}

================
File: src/app/components/TextParallax/TextParallax.js
================
"use client";

import { useRef } from "react";
import { motion, useScroll, useTransform, useInView } from "framer-motion";

const Slide = ({ left, progress, direction }) => {
	const moveDirection = direction == "left" ? -1 : 1;
	const translateX = useTransform(progress, [0, 1], [200 * moveDirection, -200 * moveDirection]);

	return (
		<motion.div style={{ x: translateX, left: left }} className="relative flex whitespace-nowrap">
			<Phrase />
			<Phrase />
			<Phrase />
			<Phrase />
			<Phrase />
			<Phrase />
			<Phrase />
			<Phrase />
		</motion.div>
	);
};

const Phrase = () => {
	return (
		<div>
			<p className="text-[5rem] leading-none overflow-hidden uppercase font-bold">Panic Panini -</p>
		</div>
	);
};

export default function TextParallax() {
	const sectionRef = useRef(null);
	const containerRef = useRef(null);
	const isInView = useInView(sectionRef, { once: true });

	const { scrollYProgress } = useScroll({
		target: containerRef,
		offset: ["start end", "end start"],
	});

	return (
		<section
			className="overflow-hidden mt-16 lg:mt-56"
			style={{
				transform: isInView ? "none" : "translateY(50px)",
				opacity: isInView ? 1 : 0,
				transition: "all 0.9s cubic-bezier(0.17, 0.55, 0.55, 1) 0.5s",
			}}
			ref={sectionRef}>
			<div ref={containerRef}>
				<Slide direction={"left"} left={"-40%"} progress={scrollYProgress} />
				<Slide direction={"right"} left={"-25%"} progress={scrollYProgress} />
			</div>
		</section>
	);
}

================
File: src/app/components/TourDates/TourDates.js
================
import ButtonPrimary from "@/app/global-components/ButtonPrimary/ButtonPrimary";

const tourDates = [
	{
		id: 1,
		date: "19 Oct",
		day: "Friday",
		time: "20.30 - 23.00",
		venue: "The O2, Isla Square",
		city: "London",
	},
	{
		id: 2,
		date: "22 Nov",
		day: "Wednesday",
		time: "20.00 - 22.00",
		venue: "Roundhouse, Chalk Bag Rd",
		city: "London",
	},
	{
		id: 3,
		date: "10 Dec",
		day: "Saturday",
		time: "20.00 - 22.00",
		venue: "200 Camden High St",
		city: "London",
	},
	{
		id: 4,
		date: "03 Jan",
		day: "Friday",
		time: "19.30 - 22.30",
		venue: "The Music Room, 49 Elephant St",
		city: "London",
	},
	{
		id: 5,
		date: "04 Jan",
		day: "Saturday",
		time: "21.30 - 23.30",
		venue: "The Cool Mouse, 49 Little Mouse St",
		city: "New York",
	},
	{
		id: 6,
		date: "12 Feb",
		day: "Monday",
		time: "21.30 - 23.30",
		venue: "The Electric Fox, 389 Fox Road",
		city: "Los Angeles",
	},
	{
		id: 7,
		date: "18 Feb",
		day: "Saturday",
		time: "21.30 - 23.30",
		venue: "The Silver Elephant, 56 Elephant Road",
		city: "Atlanta",
	},
	{
		id: 8,
		date: "01 Mar",
		day: "Thursday",
		time: "21.30 - 23.30",
		venue: "The Super Cat, 189 Meaow street",
		city: "Rome",
	},
	{
		id: 9,
		date: "12 Mar",
		day: "Sunday",
		time: "21.30 - 23.30",
		venue: "The Super Cat, 189 Meaow street",
		city: "Rome",
	},
	{
		id: 10,
		date: "18 Mar",
		day: "Saturday",
		time: "21.30 - 23.30",
		venue: "The Golden Eagle, 56 Golden road",
		city: "Berlin",
	},
	{
		id: 11,
		date: "20 May",
		day: "Friday",
		time: "20.00 - 22.30",
		venue: "The Silver Elephant, 56 Elephant Road",
		city: "Atlanta",
	},
	{
		id: 12,
		date: "22 May",
		day: "Sunday",
		time: "21.30 - 23.30",
		venue: "The Silver Elephant, 56 Elephant Road",
		city: "Atlanta",
	},
	{
		id: 13,
		date: "21 Jul",
		day: "Saturday",
		time: "21.30 - 23.30",
		venue: "The Electric Fox, 389 Fox Road",
		city: "Los Angeles",
	},
];

export default function TourDates() {
	return (
		<ul className="list-none">
			{tourDates.map((gig) => {
				return (
					<li key={gig.id} className="flex items-center justify-between py-2 border-solid border-b-2 border-white last:border-b-0 leading-tight text-xl md:py-3 md:text-2xl lg:py-5 lg:justify-center lg:text-2xl xl:text-3xl lg:flex-row">
						<div className="flex flex-col items-center justify-between text-center text-base leading-none w-[40%] md:text-xl lg:w-6/12 lg:flex-row lg:justify-start lg:text-left lg:text-2xl">
							<div className="flex flex-col justify-center items-center date w-[3.4rem] h-[3.4rem] leading-tight p-2 bg-fluo-green rounded-md lg:mr-12 lg:w-[5.3rem] lg:h-[5.3rem]">
								<p className="font-bold text-center uppercase">{gig.date}</p>
							</div>
							<div className=" text-white font-semibold leading-tight lg:ml-[20%]">
								<p>{gig.day}</p>
								<p>{gig.time}</p>
							</div>
						</div>
						<div className="flex flex-col mt-2.5 items-center text-center text-base justify-between w-[60%] md:text-xl lg:flex-row lg:text-left lg:w-6/12 lg:mt-0 lg:text-2xl">
							<div className="text-white font-semibold leading-tight">
								<p>{gig.venue}</p>
								<p>{gig.city}</p>
							</div>
							<div className="ml-2.5 lg:ml-auto">
								<ButtonPrimary customClasses="text-xs md:text-sm lg:text-base">Get Ticket</ButtonPrimary>
							</div>
						</div>
					</li>
				);
			})}
		</ul>
	);
}

================
File: src/app/contact/page.tsx
================
import PageHeader from '@/components/shared/PageHeader';
import ContactForm from '@/components/contact/ContactForm';
import { getAssetPath } from '@/utils/assetPath';

export const metadata = {
  title: 'Contact | Lashon',
  description: 'Get in touch with Lashon for bookings, collaborations, or just to say hello.',
  themeColor: '#000000',
};

export default function ContactPage() {
  return (
    <main>
      <PageHeader
        title="Contact"
        description="Let's Connect"
        imageSrc={getAssetPath('/images/gallery-3.jpg')}
      />
      <ContactForm />
    </main>
  );
}

================
File: src/app/gallery/page.tsx
================
import PageHeader from '@/components/shared/PageHeader';
import PhotoGrid from '@/components/gallery/PhotoGrid';
import { getAssetPath } from '@/utils/assetPath';

export const metadata = {
  title: 'Gallery | Lashon',
  description: 'View photos from Lashon\'s performances, studio sessions, and more.',
  themeColor: '#000000',
};

export default function GalleryPage() {
  return (
    <main>
      <PageHeader
        title="Gallery"
        description="Moments in Motion"
        imageSrc={getAssetPath('/images/gallery-2.jpg')}
      />
      <PhotoGrid />
    </main>
  );
}

================
File: src/app/global-components/AudioPlayer/AudioPlayer.js
================
"use client";

import Image from "next/image";
import { useRef, useState } from "react";
import { tracks } from "./Tracks";
import DisplayTrack from "./DisplayTrack";
import Controls from "./Controls";
import ProgressBar from "./ProgressBar";

export default function AudioPlayer() {
	const [trackIndex, setTrackIndex] = useState(0);
	const [currentTrack, setCurrentTrack] = useState(tracks[trackIndex]);
	const [timeProgress, setTimeProgress] = useState(0);
	const [duration, setDuration] = useState(0);
	const audioRef = useRef();
	const progressBarRef = useRef();

	const handleNext = () => {
		if (trackIndex >= tracks.length - 1) {
			setTrackIndex(0);
			setCurrentTrack(tracks[0]);
		} else {
			setTrackIndex((prev) => prev + 1);
			setCurrentTrack(tracks[trackIndex + 1]);
		}
	};

	return (
		<div className="relative w-full max-w-[35rem] my-auto bg-fluo-green rounded-xl border-solid border-4 border-white shadow-centered-shadow p-5 pt-28 before:content-[''] before:bg-album-cover before:absolute before:-top-4 before:left-1/2 before:-translate-x-1/2 before:w-[29.6rem] before:h-[8.5rem] before:max-w-[15rem] before:bg-cover before:blur-md before:opacity-90 lg:w-3/4 lg:before:max-w-[18.75rem] lg:before:h-[11.25rem] lg:pt-40 lg:p-11">
			<Image className="absolute -top-16 left-1/2 -translate-x-1/2 rounded-xl max-w-[16rem] lg:max-w-xs" src="/panic-panini-album.jpg" width={475} height={318} alt="Album cover" />
			<Controls audioRef={audioRef} progressBarRef={progressBarRef} setTimeProgress={setTimeProgress} duration={duration} tracks={tracks} trackIndex={trackIndex} setTrackIndex={setTrackIndex} setCurrentTrack={setCurrentTrack} handleNext={handleNext} />
			<DisplayTrack currentTrack={currentTrack} audioRef={audioRef} progressBarRef={progressBarRef} setDuration={setDuration} handleNext={handleNext} trackIndex={trackIndex} />
			<ProgressBar progressBarRef={progressBarRef} audioRef={audioRef} timeProgress={timeProgress} duration={duration} />
		</div>
	);
}

================
File: src/app/global-components/AudioPlayer/Controls.js
================
import { useState, useEffect, useRef, useCallback } from "react";
import { HeartOutline, PreviousSong, NextSong, Play, Pause } from "@/app/svg-icons/svg-icons";
export default function Controls({ audioRef, progressBarRef, duration, setTimeProgress, tracks, trackIndex, setTrackIndex, setCurrentTrack, handleNext }) {
	const [isPlaying, setIsPlaying] = useState(false);
	const playAnimationRef = useRef();

	const togglePlayPause = () => {
		setIsPlaying((prev) => !prev);
	};

	const repeat = useCallback(() => {
		const currentTime = audioRef.current.currentTime;
		setTimeProgress(currentTime);
		progressBarRef.current.value = currentTime;

		playAnimationRef.current = requestAnimationFrame(repeat);
	}, [audioRef, duration, progressBarRef, setTimeProgress]);

	const handlePrevious = () => {
		if (trackIndex === 0) {
			let lastTrackIndex = tracks.length - 1;
			setTrackIndex(lastTrackIndex);
			setCurrentTrack(tracks[lastTrackIndex]);
		} else {
			setTrackIndex((prev) => prev - 1);
			setCurrentTrack(tracks[trackIndex - 1]);
		}
	};

	useEffect(() => {
		if (isPlaying) {
			audioRef.current.play();
		} else {
			audioRef.current.pause();
		}
		playAnimationRef.current = requestAnimationFrame(repeat);
	}, [isPlaying, audioRef, repeat]);

	return (
		<div className="flex items-center pt-8 pb-4 gap-4">
			<button onClick={togglePlayPause}>{isPlaying ? <Pause extraClasses="fill-red-300 hover:fill-white transition-all" /> : <Play extraClasses="fill-red-300 hover:fill-white transition-all" />}</button>
			<button className="ml-auto">
				<HeartOutline extraClasses="fill-red-300" />
			</button>
			<button onClick={handlePrevious}>
				<PreviousSong extraClasses="fill-red-300 hover:fill-white transition-all" />
			</button>

			<button onClick={handleNext}>
				<NextSong extraClasses="fill-red-300 hover:fill-white transition-all" />
			</button>
		</div>
	);
}

================
File: src/app/global-components/AudioPlayer/DisplayTrack.js
================
import { useEffect } from "react";

export default function DisplayTrack({ currentTrack, audioRef, setDuration, progressBarRef, handleNext, trackIndex }) {
	const trackDuration = () => {
		const seconds = audioRef.current.duration;
		setDuration(seconds);
		progressBarRef.current.max = seconds;
	};

	useEffect(() => {
		trackDuration();
	}, []);

	return (
		<div className="text-[#6f705f]">
			<audio src={currentTrack.src} preload="metadata" ref={audioRef} onEnded={handleNext} onLoadedMetadata={trackDuration} />
			<div className="text-base">
				<p className="font-bold">
					{trackIndex + 1}. {currentTrack.title}
				</p>
				<p>
					Artist: <span className="italic">{currentTrack.author}</span>
				</p>
			</div>
		</div>
	);
}

================
File: src/app/global-components/AudioPlayer/ProgressBar.js
================
import Image from "next/image";

const formatTime = (time) => {
	if (time && !isNaN(time)) {
		const minutes = Math.floor(time / 60);
		const formatMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;
		const seconds = Math.floor(time % 60);
		const formatSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;
		return `${formatMinutes}:${formatSeconds}`;
	}
	return "00:00";
};

export default function ProgressBar({ progressBarRef, audioRef, timeProgress, duration }) {
	const handleProgressChange = () => {
		audioRef.current.currentTime = progressBarRef.current.value;
	};

	return (
		<div className="flex flex-col progress pt-2">
			<div className="flex items-center">
				<span className="text-base font-bold text-white">{formatTime(timeProgress)}</span>
				{!audioRef.current?.paused && timeProgress < 0.5 && <Image className="ml-2 max-w-[2.5rem]" src="/three-dots.svg" width={120} height={30} alt="Loader" />}
			</div>
			<input type="range" ref={progressBarRef} defaultValue="0" onChange={handleProgressChange} />
			<span className="text-base font-bold text-white">{formatTime(duration)}</span>
		</div>
	);
}

================
File: src/app/global-components/AudioPlayer/Tracks.js
================
export const tracks = [
	{
		title: "Green Daze",
		src: "./mp3-songs/green-daze.mp3",
		author: "Your Bandmate",
	},
	{
		title: "Periscope",
		src: "./mp3-songs/periscope.mp3",
		author: "Cool Band Superstars",
	},
	{
		title: "Whats It To Ya Punk",
		src: "./mp3-songs/what-is-to-ya-punk.mp3",
		author: "The Brownies",
	},
];

================
File: src/app/global-components/ButtonPrimary/ButtonPrimary.js
================
export default function ButtonPrimary({ children, customClasses }) {
	return <button className={`px-5 uppercase py-2 mt-3 text-white whitespace-nowrap font-bold text-base bg-yellow-btn-primary rounded-full transition-all hover:bg-yellow-600${customClasses ? ` ${customClasses}` : ""}`}>{children}</button>;
}

================
File: src/app/global-components/ContactForm/ContactForm.js
================
"use client";
import ButtonPrimary from "../ButtonPrimary/ButtonPrimary";

export default function ContactForm() {
	const formHandler = (event) => {
		event.preventDefault();
		console.log("form submitted!");
	};

	return (
		<form className="mt-6 w-full max-w-[35rem] xl:max-w-xl" onSubmit={formHandler}>
			<div className="grid grid-cols-2 gap-4">
				<div>
					<label className="block text-sm font-medium leading-6 text-gray-900" htmlFor="name">
						Your Name
					</label>
					<input className="block w-full bg-transparent rounded-md border-[1px] shadow-none p-2.5 placeholder:text-gray-400 focus:outline-none focus:ring-2 sm:leading-0 text-xs" type="text" name="name" id="name" />
				</div>
				<div className="flex flex-col">
					<label className="block text-sm font-medium leading-6 text-gray-900" htmlFor="email">
						Your Email
					</label>
					<input className="block w-full bg-transparent rounded-md border-[1px] p-2.5 text-gray-900 shadow-none placeholder:text-gray-400 focus:outline-none focus:ring-2 sm:leading-0 text-xs" type="text" name="email" id="email" />
				</div>
			</div>
			<div>
				<label className="lock text-sm font-medium leading-6 text-gray-900" htmlFor="message">
					Your message
				</label>
				<textarea className="block w-full bg-transparent rounded-md border-[1px] p-2.5 text-gray-900 shadow-none placeholder:text-gray-400 focus:outline-none focus:ring-2 sm:leading-0 text-xs resize-none" id="message" rows="8"></textarea>
			</div>
			<div className="flex mt-3 lg:justify-end">
				<ButtonPrimary>Send it</ButtonPrimary>
			</div>
		</form>
	);
}

================
File: src/app/global-components/Container/Container.js
================
export default function Container({ children, customClasses }) {
	return <div className={`container mx-auto px-2.5${customClasses ? ` ${customClasses}` : ""}`}>{children}</div>;
}

================
File: src/app/global-components/ScrollTo/ScrollTo.js
================
import { useRouter } from "next/navigation";
import { scrollTo } from "@/app/util/scrollTo";

const ScrollTo = ({ toId, toRef, duration, children }) => {
	const router = useRouter();

	const handleClick = () => {
		return scrollTo({ id: toId, ref: toRef, duration });
	};

	return <div onClick={handleClick}>{children}</div>;
};

export default ScrollTo;

================
File: src/app/global-components/SubscribeForm/SubscribeForm.js
================
"use client";

import ButtonPrimary from "../ButtonPrimary/ButtonPrimary";

export default function SubscribeForm() {
	const formHandler = (event) => {
		event.preventDefault();
		console.log("form submitted!");
	};

	return (
		<form className="w-full max-w-[35rem] lg:w-10/12" onSubmit={formHandler}>
			<div className="text-white">
				<label className="lock text-sm font-medium leading-6" htmlFor="email">
					Your email
				</label>
				<input className="block w-full bg-gray-800 rounded-md border-0 p-2.5 text-white shadow-sm ring-1 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:border-black sm:leading-0 text-xs" type="text" name="name" id="name" />
			</div>
			<div className="flex mt-3 lg:justify-end">
				<ButtonPrimary>Subscribe</ButtonPrimary>
			</div>
		</form>
	);
}

================
File: src/app/music/page.tsx
================
import PageHeader from '@/components/shared/PageHeader';
import MusicPlayer from '@/components/music/MusicPlayer';
import { getAssetPath } from '@/utils/assetPath';

export const metadata = {
  title: 'Music | Lashon',
  description: 'Listen to Lashon\'s latest releases and explore her unique fusion of hip-hop, R&B, and soul.',
  themeColor: '#000000',
};

export default function MusicPage() {
  return (
    <main className="bg-black">
      <PageHeader
        title="Latest Releases"
        description="Experience the Sound"
        imageSrc={getAssetPath('/images/hero-explore.jpeg')}
      />
      <section className="section-padding">
        <div className="container-width">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            <MusicPlayer
              title="Moolah"
              description="Latest single showcasing the evolution of sound"
              coverImage={getAssetPath('/images/moolah-cover.jpg')}
              streamingLinks={[
                {
                  platform: 'Spotify',
                  url: 'https://open.spotify.com/track/moolah'
                },
                {
                  platform: 'Apple Music',
                  url: 'https://music.apple.com/track/moolah'
                }
              ]}
            />
          </div>
        </div>
      </section>
    </main>
  );
}

================
File: src/app/svg-icons/svg-icons.js
================
export const ArrowBottom = () => {
	return (
		<svg className="max-w-[0.9rem] h-auto ml-1.5" fill="#ffc621" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40.67 22.18">
			<path d="m40.13.54c-.72-.72-1.89-.72-2.61,0l-17.18,17.18L3.16.54c-.72-.72-1.89-.72-2.61,0C-.18,1.26-.18,2.43.54,3.16l18.49,18.48c.35.35.82.54,1.31.54s.96-.19,1.31-.54L40.13,3.16c.72-.72.72-1.89,0-2.61Z" />
		</svg>
	);
};

export const Spotify = () => {
	return (
		<svg fill="#1C2033" width="52" height="52" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
			<path d="M42.2005 48.6999C41.9005 48.6999 41.5005 48.5999 41.2005 48.4999C34.7005 45.2999 27.2005 44.5999 20.3005 46.3999C19.1005 46.6999 17.9005 45.9999 17.6005 44.7999C17.3005 43.5999 18.0005 42.3999 19.2005 41.9999C27.2005 39.8999 35.7005 40.6999 43.2005 44.3999C44.3005 44.8999 44.8005 46.2999 44.2005 47.3999C43.8005 48.1999 43.0005 48.6999 42.2005 48.6999Z" />
			<path d="M45.3013 37.9996C45.0013 37.9996 44.7013 37.8996 44.4013 37.7996C39.2013 35.3996 33.5013 34.0996 28.0013 34.0996C24.7013 34.0996 21.9013 34.3996 19.2013 35.1996C18.0013 35.4996 16.8013 34.7996 16.4013 33.5996C16.1013 32.3996 16.8013 31.1996 18.0013 30.7996C21.1013 29.9996 24.3013 29.5996 27.9013 29.5996C34.1013 29.5996 40.4013 30.9996 46.2013 33.6996C47.3013 34.1996 47.8013 35.5996 47.3013 36.6996C46.9013 37.4996 46.1013 37.9996 45.3013 37.9996Z" />
			<path d="M48.5022 26.7998C48.2022 26.7998 47.9022 26.6998 47.5022 26.5998C41.4022 23.6998 34.8022 22.2998 27.8022 22.2998C24.7022 22.2998 21.3022 22.6998 17.8022 23.3998C16.6022 23.6998 15.4022 22.8998 15.1022 21.6998C15.0022 20.3998 15.8022 19.1998 17.0022 18.9998C20.8022 18.1998 24.5022 17.7998 27.9022 17.7998C35.5022 17.7998 42.7022 19.3998 49.5022 22.4998C50.6022 22.9998 51.1022 24.3998 50.6022 25.4998C50.2022 26.2998 49.4022 26.7998 48.5022 26.7998Z" />
			<path d="M32.0008 62.2998C15.3008 62.2998 1.80078 48.6998 1.80078 31.9998C1.80078 15.2998 15.3008 1.7998 32.0008 1.7998C48.7008 1.7998 62.3008 15.3998 62.3008 31.9998C62.3008 48.6998 48.7008 62.2998 32.0008 62.2998ZM32.0008 6.2998C17.8008 6.2998 6.30078 17.7998 6.30078 31.9998C6.30078 46.1998 17.8008 57.7998 32.0008 57.7998C46.2008 57.7998 57.8008 46.1998 57.8008 31.9998C57.8008 17.7998 46.2008 6.2998 32.0008 6.2998Z" />
		</svg>
	);
};

export const SoundCloud = () => {
	return (
		<svg fill="#1C2033" width="52" height="52" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
			<path d="M1.70216 30.1039C1.57279 30.1039 1.47011 30.204 1.45338 30.3466L1 33.7905L1.45338 37.1751C1.47011 37.3177 1.57273 37.4171 1.70216 37.4171C1.82746 37.4171 1.92951 37.3184 1.94949 37.1764L2.48689 33.7905L1.94949 30.346C1.93014 30.2039 1.82683 30.1039 1.70216 30.1039ZM4.25187 28.2223C4.23051 28.0743 4.12451 27.9723 3.99383 27.9723C3.86245 27.9723 3.75376 28.0777 3.73578 28.2223L3.12634 33.7905L3.73578 39.2354C3.75313 39.3814 3.86183 39.4868 3.99383 39.4868C4.12382 39.4868 4.22989 39.3841 4.25119 39.2368L4.94457 33.7905L4.25187 28.2223ZM13.8561 23.0862C13.6061 23.0862 13.3993 23.2908 13.3873 23.5509L12.9019 33.7952L13.3873 40.4156C13.4 40.6742 13.6061 40.8783 13.8561 40.8783C14.1048 40.8783 14.3108 40.6736 14.3255 40.4143V40.4163L14.8742 33.7952L14.3255 23.5509C14.3108 23.2908 14.1047 23.0862 13.8561 23.0862ZM8.88527 26.6467C8.69325 26.6467 8.53657 26.8001 8.52115 27.0047L7.97443 33.7925L8.52115 40.3595C8.53581 40.5629 8.69319 40.7162 8.88527 40.7162C9.07528 40.7162 9.23196 40.5629 9.24869 40.3595L9.87009 33.7925L9.24869 27.0034C9.23196 26.8001 9.07528 26.6467 8.88527 26.6467ZM18.9076 40.8777C19.2176 40.8777 19.4697 40.6276 19.4823 40.3075L19.9584 33.7985L19.483 20.1596C19.4703 19.8396 19.2183 19.5895 18.9083 19.5895C18.5955 19.5895 18.3429 19.8402 18.3328 20.1603L17.9107 33.7978L18.3328 40.3095C18.3428 40.6269 18.5955 40.8777 18.9076 40.8777ZM29.2492 40.9084C29.676 40.9084 30.0281 40.557 30.036 40.1249L30.3681 33.8025L30.036 18.0506C30.0286 17.6192 29.6759 17.2672 29.2492 17.2672C28.8218 17.2672 28.4691 17.6186 28.4624 18.0513L28.1657 33.7972C28.1657 33.8072 28.4624 40.1288 28.4624 40.1288C28.4691 40.5569 28.8225 40.9084 29.2492 40.9084ZM24.039 40.8837C24.4105 40.8837 24.7098 40.5856 24.7198 40.2056V40.2102L25.1238 33.7999L24.7191 20.0623C24.7091 19.6822 24.4098 19.3849 24.0383 19.3849C23.6643 19.3849 23.3649 19.6823 23.3569 20.0623L22.9976 33.8006L23.3576 40.2096C23.3656 40.5856 23.665 40.8837 24.039 40.8837ZM11.361 40.8237C11.5817 40.8237 11.7604 40.6469 11.7771 40.4143L12.3625 33.7925L11.7771 27.4935C11.7611 27.2608 11.5825 27.0854 11.361 27.0854C11.137 27.0854 10.9583 27.2621 10.9443 27.4962L10.4289 33.7925L10.9443 40.4136C10.959 40.6469 11.137 40.8237 11.361 40.8237ZM6.42959 40.4609C6.5909 40.4609 6.72159 40.3336 6.74026 40.1575L7.39769 33.7912L6.74088 27.1848C6.72153 27.0081 6.59084 26.8807 6.42952 26.8807C6.26614 26.8807 6.13545 27.0088 6.11879 27.1848L5.54005 33.7912L6.11879 40.1562C6.13483 40.3329 6.26551 40.4609 6.42959 40.4609ZM26.6342 19.8336C26.2308 19.8336 25.9073 20.1544 25.8994 20.5651L25.5713 33.8012L25.8994 40.1702C25.9074 40.5756 26.2301 40.8963 26.6342 40.8963C27.0369 40.8963 27.3583 40.5763 27.3676 40.1655V40.1709L27.7356 33.8019L27.3676 20.5637C27.3582 20.1544 27.0368 19.8336 26.6342 19.8336ZM16.3725 40.891C16.6512 40.891 16.8812 40.6636 16.8946 40.3735L17.4067 33.7971L16.8946 21.2098C16.8805 20.919 16.6512 20.6924 16.3725 20.6924C16.0911 20.6924 15.8618 20.9197 15.8497 21.2098L15.3963 33.7971L15.8504 40.3762C15.8617 40.6636 16.091 40.891 16.3725 40.891ZM22.0907 40.2668L22.5308 33.7992L22.0907 19.7009C22.08 19.3509 21.804 19.0762 21.4633 19.0762C21.1205 19.0762 20.8445 19.3502 20.8352 19.7009L20.4445 33.7985L20.8358 40.2695C20.8452 40.6162 21.1213 40.8903 21.4633 40.8903C21.8047 40.8903 22.0793 40.6155 22.0907 40.2668ZM55.3747 25.6725C54.3298 25.6725 53.333 25.8839 52.4249 26.2646C51.8181 19.3916 46.0545 14 39.0241 14C37.3038 14 35.6269 14.3387 34.146 14.9115C33.5706 15.1342 33.4172 15.3635 33.4119 15.8083V40.0121C33.4179 40.4788 33.7799 40.8676 34.2354 40.9136C34.2547 40.9156 55.238 40.9263 55.3741 40.9263C59.5854 40.9263 63 37.5117 63 33.2997C62.9999 29.0877 59.5861 25.6725 55.3747 25.6725ZM31.8529 15.787C31.3949 15.787 31.0188 16.1631 31.0121 16.6251L30.6681 33.8045L31.0128 40.0395C31.0188 40.4949 31.3949 40.8703 31.8529 40.8703C32.3096 40.8703 32.6857 40.4949 32.6924 40.0329V40.0402L33.0664 33.8045L32.6924 16.6238C32.6857 16.1631 32.3096 15.787 31.8529 15.787ZM7.15837 45.7744C6.25624 45.5624 6.01216 45.449 6.01216 45.0916C6.01216 44.8397 6.21552 44.5789 6.82496 44.5789C7.34569 44.5789 7.75246 44.7902 8.11789 45.1643L8.9387 44.3682C8.402 43.8075 7.75184 43.474 6.86637 43.474C5.74353 43.474 4.83337 44.1082 4.83337 45.141C4.83337 46.2625 5.56554 46.5959 6.61371 46.8393C7.68649 47.0826 7.88189 47.246 7.88189 47.612C7.88189 48.0428 7.56383 48.2301 6.89036 48.2301C6.34564 48.2301 5.83355 48.0434 5.43486 47.5787L4.61392 48.3109C5.04462 48.945 5.87477 49.3431 6.82489 49.3431C8.37851 49.3431 9.06124 48.6116 9.06124 47.5308C9.06131 46.2945 8.06113 45.9858 7.15837 45.7744ZM12.3951 43.474C10.8429 43.474 9.92472 44.677 9.92472 46.4086C9.92472 48.1402 10.8428 49.3424 12.3951 49.3424C13.9474 49.3424 14.8668 48.1402 14.8668 46.4086C14.8668 44.677 13.9474 43.474 12.3951 43.474ZM12.3951 48.2135C11.477 48.2135 11.0942 47.4247 11.0942 46.4092C11.0942 45.393 11.477 44.6042 12.3951 44.6042C13.3146 44.6042 13.696 45.393 13.696 46.4092C13.696 47.4247 13.3146 48.2135 12.3951 48.2135ZM19.4603 46.7586C19.4603 47.6687 19.0123 48.2301 18.2895 48.2301C17.566 48.2301 17.1272 47.6527 17.1272 46.7426V43.5628H15.9884V46.7586C15.9884 48.4162 16.9159 49.3431 18.2894 49.3431C19.7364 49.3431 20.5985 48.3916 20.5985 46.7427V43.5628H19.4603V46.7586ZM25.5079 45.9698C25.5079 46.2872 25.5239 47.002 25.5239 47.2134C25.4506 47.0667 25.2639 46.7826 25.1258 46.5706L23.1089 43.5621H22.02V49.2538H23.1422V46.7493C23.1422 46.432 23.1262 45.7171 23.1262 45.5057C23.1989 45.6518 23.3869 45.9365 23.5242 46.1486L25.6139 49.2537H26.63V43.5621H25.5079V45.9698ZM29.8733 43.5628H28.093V49.2543H29.7912C31.2548 49.2543 32.7024 48.4082 32.7024 46.4086C32.7024 44.3269 31.4989 43.5628 29.8733 43.5628ZM29.7912 48.1488H29.2312V44.6689H29.8327C31.0362 44.6689 31.5323 45.2457 31.5323 46.4086C31.5322 47.4494 30.9868 48.1488 29.7912 48.1488ZM36.2223 44.6036C36.7344 44.6036 37.0597 44.8316 37.2631 45.2217L38.3199 44.7343C37.9619 43.9948 37.3111 43.474 36.2382 43.474C34.752 43.474 33.7105 44.677 33.7105 46.4086C33.7105 48.2049 34.7099 49.3424 36.1975 49.3424C37.2303 49.3424 37.9131 48.863 38.3032 48.0581L37.3444 47.4887C37.0436 47.9935 36.7422 48.2129 36.2302 48.2129C35.3767 48.2129 34.8807 47.432 34.8807 46.4086C34.8801 45.3524 35.3695 44.6036 36.2223 44.6036ZM40.4436 43.5628H39.3054V49.2543H42.726V48.1315H40.4436V43.5628ZM45.7245 43.474C44.1709 43.474 43.2528 44.677 43.2528 46.4086C43.2528 48.1402 44.1709 49.3424 45.7245 49.3424C47.2767 49.3424 48.1955 48.1402 48.1955 46.4086C48.1956 44.677 47.2767 43.474 45.7245 43.474ZM45.7245 48.2135C44.805 48.2135 44.4236 47.4247 44.4236 46.4092C44.4236 45.393 44.805 44.6042 45.7245 44.6042C46.642 44.6042 47.024 45.393 47.024 46.4092C47.024 47.4247 46.642 48.2135 45.7245 48.2135ZM52.7883 46.7586C52.7883 47.6687 52.3422 48.2301 51.6188 48.2301C50.894 48.2301 50.4559 47.6527 50.4559 46.7426V43.5628H49.3178V46.7586C49.3178 48.4162 50.2446 49.3431 51.6188 49.3431C53.0657 49.3431 53.9272 48.3916 53.9272 46.7427V43.5628H52.7883V46.7586ZM57.1297 43.5628H55.35V49.2543H57.0483C58.5125 49.2543 59.9588 48.4082 59.9588 46.4086C59.9588 44.3269 58.7559 43.5628 57.1297 43.5628ZM57.0483 48.1488H56.4875V44.6689H57.0897C58.2918 44.6689 58.7879 45.2457 58.7879 46.4086C58.7879 47.4494 58.2431 48.1488 57.0483 48.1488Z" />
		</svg>
	);
};

export const Youtube = () => {
	return (
		<svg fill="#1C2033" width="52" height="52" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
			<path d="M61.7 17.0998C61 14.3998 58.9 12.2998 56.2 11.5998C51.4 10.2998 32 10.2998 32 10.2998C32 10.2998 12.6 10.2998 7.8 11.5998C5.1 12.2998 3 14.3998 2.3 17.0998C1 21.9998 1 31.9998 1 31.9998C1 31.9998 1 42.0998 2.3 46.8998C3 49.5998 5.1 51.6998 7.8 52.3998C12.6 53.6998 32 53.6998 32 53.6998C32 53.6998 51.4 53.6998 56.2 52.3998C58.9 51.6998 61 49.5998 61.7 46.8998C63 42.0998 63 31.9998 63 31.9998C63 31.9998 63 21.9998 61.7 17.0998ZM25.8 41.2998V22.6998L41.9 31.9998L25.8 41.2998Z" />
		</svg>
	);
};

export const AppleMusic = () => {
	return (
		<svg fill="#1C2033" width="68" height="68" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
			<path d="M10.7 32.4002C10.7 31.2002 11.2 30.2002 12.3 29.6002C11.7 28.7002 10.9 28.3002 9.7 28.2002C9.3 28.2002 8.8 28.2002 8.1 28.5002C7.5 28.8002 7.1 28.9002 6.9 28.9002C6.8 28.9002 6.4 28.8002 5.9 28.5002C5.4 28.1002 5 28.0002 4.6 28.0002C4 28.0002 3.4 28.1002 2.9 28.5002C2.4 28.9002 2 29.3002 1.6 29.8002C1.3 30.4002 1 31.4002 1 32.4002C1 33.3002 1.1 34.2002 1.4 35.1002C1.7 36.0002 2 36.7002 2.4 37.3002C2.8 37.8002 3.2 38.3002 3.4 38.6002C3.8 39.0002 4.2 39.2002 4.7 39.2002C5 39.2002 5.3 39.1002 5.7 38.9002C6.1 38.8002 6.6 38.6002 7 38.6002C7.4 38.6002 7.8 38.7002 8.2 38.9002C8.7 39.2002 9.1 39.2002 9.4 39.2002C9.8 39.2002 10.3 38.9002 10.7 38.7002C10.8 38.6002 11 38.4002 11.1 38.2002C11.2 37.9002 11.5 37.7002 11.6 37.4002C11.7 37.1002 11.9 37.0002 12 36.8002C12.1 36.5002 12.3 36.3002 12.4 36.0002C12.4 35.9002 12.5 35.7002 12.5 35.6002C12.5 35.5002 12.6 35.3002 12.6 35.2002C12.2 35.1002 12 34.8002 11.7 34.6002C11 34.2002 10.7 33.4002 10.7 32.4002ZM21.1 35.1002L18.1 28.4002H15.8V39.1002H17.7V32.1002H17.8L20.3 37.7002H21.7L24.2 32.1002H24.3V39.1002H26.4V28.4002H24L21.1 35.1002ZM8.9 27.0002C9.4 26.4002 9.7 25.7002 9.7 24.9002V24.8002V24.7002C9.3 24.7002 8.9 24.8002 8.5 25.1002C8.1 25.4002 7.7 25.6002 7.5 25.9002C7 26.5002 6.7 27.2002 6.7 27.8002V27.9002V28.0002C7.5 28.1002 8.2 27.7002 8.9 27.0002ZM49.8 28.4002H52V39.1002H49.8V28.4002ZM58.9 30.1002C60.2 30.1002 61 31.1002 61 32.2002H63V32.0002C63 29.9002 61.4 28.1002 58.7 28.1002C55.9 28.1002 54.2 29.9002 54.2 33.1002V34.3002C54.2 37.4002 55.9 39.2002 58.7 39.2002C61.4 39.2002 63 37.4002 63 35.4002V35.1002H60.8C60.8 36.3002 60.2 37.2002 58.7 37.2002C57.2 37.2002 56.5 36.2002 56.5 34.1002V33.0002C56.5 31.1002 57.4 30.1002 58.9 30.1002ZM34.9 35.2002C34.9 36.6002 34 37.4002 32.8 37.4002C31.5 37.4002 30.7 36.6002 30.7 35.2002V28.3002H28.5V35.4002C28.5 37.7002 30.2 39.3002 32.8 39.3002C35.5 39.3002 37.1 37.7002 37.1 35.4002V28.3002H34.9V35.2002ZM44.6 32.9002L43 32.5002C42.1 32.2002 41.6 31.9002 41.6 31.2002C41.6 30.4002 42.2 29.9002 43.4 29.9002C44.6 29.9002 45.2 30.5002 45.3 31.3002H47.4C47.4 29.4002 45.8 28.1002 43.4 28.1002C41.2 28.1002 39.4 29.3002 39.4 31.3002C39.4 33.1002 40.7 34.0002 42.1 34.3002L43.7 34.7002C44.7 35.0002 45.3 35.3002 45.3 36.0002C45.3 36.8002 44.7 37.4002 43.4 37.4002C42.1 37.4002 41.3 36.8002 41.3 35.8002H39.1C39.1 37.4002 40.1 39.2002 43.2 39.2002C45.8 39.2002 47.5 37.9002 47.5 35.8002C47.5 33.9002 46.2 33.3002 44.6 32.9002Z" />
		</svg>
	);
};

export const HeartOutline = ({ extraClasses }) => {
	return (
		<svg className={`w-7 h-auto${extraClasses ? ` ${extraClasses}` : ""}`} id="heart-outline" data-name="Capa 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44.56 38.99">
			<path d="m40.94,3.63c-2.34-2.34-5.45-3.63-8.75-3.63s-6.42,1.29-8.75,3.63l-1.15,1.15-1.15-1.15C18.79,1.29,15.68,0,12.37,0S5.96,1.29,3.62,3.63c-4.83,4.83-4.83,12.68,0,17.51l17.3,17.3c.28.28.63.46,1,.52.12.02.25.04.37.04.49,0,.98-.19,1.35-.56l17.3-17.3c4.83-4.83,4.83-12.68,0-17.51Zm-2.7,14.8l-15.96,15.96-15.96-15.96c-3.34-3.34-3.34-8.76,0-12.1,1.62-1.62,3.77-2.5,6.05-2.5s4.43.89,6.05,2.5l2.51,2.51c.72.72,1.99.72,2.71,0l2.5-2.51c1.62-1.62,3.76-2.5,6.05-2.5s4.43.89,6.05,2.5c3.34,3.34,3.34,8.76,0,12.1Z" />
		</svg>
	);
};

export const PreviousSong = ({ extraClasses }) => {
	return (
		<svg className={`w-7 h-auto${extraClasses ? ` ${extraClasses}` : ""}`} id="previous-song" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44.62 38.99">
			<path d="m2.27,38.98c1.04,0,2.27-.84,2.27-1.89h0V1.9c0-1.04-1.23-1.88-2.27-1.88C1.22.02,0,.86,0,1.9v35.19c0,1.04,1.23,1.89,2.27,1.89h0s0,0,0,0Zm10.67-12.98l20.32,11.95.37.2c3.7,1.91,8.25.45,10.16-3.25.55-1.07.84-2.25.84-3.44V7.12c-.23-4.16-3.79-7.34-7.95-7.11-1.21.07-2.38.42-3.42,1.04L12.94,13l-.42.27c-3.44,2.35-4.33,7.04-1.98,10.48.63.92,1.45,1.69,2.41,2.25h0Z" />
		</svg>
	);
};

export const NextSong = ({ extraClasses }) => {
	return (
		<svg className={`w-7 h-auto${extraClasses ? ` ${extraClasses}` : ""}`} id="next" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44.62 38.99">
			<path d="m42.35.01c-1.04,0-2.27.84-2.27,1.89h0v35.19c0,1.04,1.23,1.88,2.27,1.88,1.04,0,2.26-.84,2.26-1.88V1.9c0-1.04-1.23-1.89-2.27-1.89h0s0,0,0,0Zm-10.67,12.98L11.36,1.04l-.37-.2C7.29-1.07,2.75.39.84,4.09.29,5.15,0,6.33,0,7.53v24.34c.23,4.16,3.79,7.34,7.95,7.11,1.21-.07,2.38-.42,3.42-1.04l20.32-11.95.42-.27c3.44-2.35,4.33-7.04,1.98-10.48-.63-.92-1.45-1.69-2.41-2.25h0Z" />
		</svg>
	);
};

export const Play = ({ extraClasses }) => {
	return (
		<svg className={`w-14 h-auto${extraClasses ? ` ${extraClasses}` : ""}`} id="play" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44">
			<path d="m16.65,34.92c-.08,0-.17,0-.25-.01-1.19-.1-2.27-.7-2.98-1.65-.81-1.1-.81-2.55-.81-5.44v-11.63c0-2.89,0-4.35.81-5.44.71-.96,1.8-1.56,2.98-1.65,1.36-.11,2.59.66,5.05,2.19l9.31,5.82c2.22,1.39,3.34,2.09,3.85,3.28.44,1.03.44,2.22,0,3.25-.51,1.19-1.63,1.89-3.85,3.28l-9.31,5.82c-2.3,1.44-3.53,2.2-4.79,2.2Zm0-23.09s-.02,0-.03,0c-.4.03-.76.23-.99.55-.27.37-.27,1.96-.27,3.8v11.63c0,1.84,0,3.44.27,3.8.24.32.6.52.99.55.45.04,1.8-.81,3.37-1.78l9.31-5.82c1.46-.91,2.61-1.63,2.78-2.03.15-.34.15-.74,0-1.08-.17-.4-1.32-1.12-2.78-2.03l-9.31-5.82c-1.53-.96-2.86-1.79-3.34-1.79Z" />
			<path d="m22,44C9.87,44,0,34.13,0,22S9.87,0,22,0s22,9.87,22,22-9.87,22-22,22Zm0-40.88C11.59,3.12,3.12,11.59,3.12,22s8.47,18.88,18.88,18.88,18.88-8.47,18.88-18.88S32.41,3.12,22,3.12Z" />
		</svg>
	);
};

export const Pause = ({ extraClasses }) => {
	return (
		<svg className={`w-14 h-auto${extraClasses ? ` ${extraClasses}` : ""}`} id="pause" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44">
			<path d="m22,44C9.87,44,0,34.13,0,22S9.87,0,22,0s22,9.87,22,22-9.87,22-22,22Zm0-40.88C11.59,3.12,3.12,11.59,3.12,22s8.47,18.88,18.88,18.88,18.88-8.47,18.88-18.88S32.41,3.12,22,3.12Z" />
			<rect x="12.98" y="9.45" width="4.52" height="24.17" rx="2.26" ry="2.26" />
			<rect x="25.86" y="9.45" width="4.52" height="24.17" rx="2.26" ry="2.26" />
		</svg>
	);
};

export const MapMapper = ({ extraClasses }) => {
	return (
		<svg className={`w-4 h-auto${extraClasses ? ` ${extraClasses}` : ""}`} id="lni_lni-map-marker" data-name="lni lni-map-marker" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40.62 49.07">
			<path d="m20.31,0C9.1,0,0,8.78,0,19.58c0,8.21,10.89,21.21,17.31,28.19.81.89,1.87,1.3,3.01,1.3s2.19-.49,3.01-1.3c6.42-6.99,17.31-19.99,17.31-28.19C40.62,8.78,31.52,0,20.31,0Zm.33,45.34c-.16.16-.41.16-.65,0C12.11,36.73,3.66,25.51,3.66,19.58,3.66,10.81,11.13,3.66,20.31,3.66s16.66,7.15,16.66,15.93c0,5.93-8.45,17.14-16.33,25.76Z" />
			<path d="m20.31,11.29c-4.88,0-8.86,3.98-8.86,8.86s3.98,8.94,8.86,8.94,8.86-3.98,8.86-8.86-3.98-8.94-8.86-8.94Zm0,14.14c-2.93,0-5.2-2.36-5.2-5.2s2.36-5.2,5.2-5.2,5.2,2.36,5.2,5.2-2.28,5.2-5.2,5.2Z" />
		</svg>
	);
};

export const Calendar = () => {
	return (
		<svg className="w-4 h-auto fill-black" id="lni_lni-calendar" data-name="lni lni-calendar" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 49.24 49.24">
			<path d="m15.28,28.36h-2.52c-.49,0-.81.33-.81.81v2.44c0,.49.32.81.81.81h2.52c.49,0,.81-.33.81-.81v-2.44c0-.41-.41-.81-.81-.81Z" />
			<path d="m25.84,28.36h-2.52c-.49,0-.81.33-.81.81v2.44c0,.49.32.81.81.81h2.52c.49,0,.81-.33.81-.81v-2.44c0-.41-.33-.81-.81-.81Z" />
			<path d="m36.48,28.36h-2.52c-.49,0-.81.33-.81.81v2.44c0,.49.33.81.81.81h2.52c.49,0,.81-.33.81-.81v-2.44c0-.41-.32-.81-.81-.81Z" />
			<path d="m15.28,38.84h-2.52c-.49,0-.81.33-.81.81v2.44c0,.49.32.81.81.81h2.52c.49,0,.81-.33.81-.81v-2.44c0-.41-.41-.81-.81-.81Z" />
			<path d="m25.84,38.84h-2.52c-.49,0-.81.33-.81.81v2.44c0,.49.32.81.81.81h2.52c.49,0,.81-.33.81-.81v-2.44c0-.41-.33-.81-.81-.81Z" />
			<path d="m36.48,38.84h-2.52c-.49,0-.81.33-.81.81v2.44c0,.49.33.81.81.81h2.52c.49,0,.81-.33.81-.81v-2.44c0-.41-.32-.81-.81-.81Z" />
			<path d="m44.12,11.13h-17.63v-1.54c1.87-.73,3.17-2.52,3.17-4.63,0-2.76-2.27-4.96-5.04-4.96s-5.04,2.19-5.04,4.96c0,2.11,1.3,3.9,3.17,4.63v1.54H5.12c-2.76,0-5.12,2.27-5.12,5.12v27.87c0,2.76,2.28,5.12,5.12,5.12h39c2.76,0,5.12-2.27,5.12-5.12v-27.95c0-2.76-2.36-5.04-5.12-5.04ZM24.62,3.66c.73,0,1.38.57,1.38,1.3s-.57,1.3-1.38,1.3-1.38-.57-1.38-1.3.65-1.3,1.38-1.3ZM5.12,14.79h39c.81,0,1.46.65,1.46,1.46v5.04H3.74v-5.04c0-.89.57-1.46,1.38-1.46Zm39,30.79H5.12c-.81,0-1.46-.65-1.46-1.46v-19.26h41.84v19.26c.08.81-.57,1.46-1.38,1.46Z" />
		</svg>
	);
};

export const Github = ({ extraClasses }) => {
	return (
		<svg aria-hidden="true" className={`w-4${extraClasses ? ` ${extraClasses}` : ""}`} height="24" version="1.1" viewBox="0 0 16 16" width="24">
			<path
				fillRule="evenodd"
				d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path>
		</svg>
	);
};

================
File: src/app/util/animate-scroll.js
================
// animateScroll.js

const pow = Math.pow;

// The easing function that makes the scroll decelerate over time
function easeOutQuart(x) {
	return 1 - pow(1 - x, 4);
}

export function animateScroll({ targetPosition, initialPosition, duration }) {
	let start;
	let position;
	let animationFrame;

	const requestAnimationFrame = window.requestAnimationFrame;
	const cancelAnimationFrame = window.cancelAnimationFrame;

	// maximum amount of pixels we can scroll
	const maxAvailableScroll = document.documentElement.scrollHeight - document.documentElement.clientHeight;

	const amountOfPixelsToScroll = initialPosition - targetPosition;

	function step(timestamp) {
		if (start === undefined) {
			start = timestamp;
		}

		const elapsed = timestamp - start;

		// this just gives us a number between 0 (start) and 1 (end)
		const relativeProgress = elapsed / duration;

		// ease out that number
		const easedProgress = easeOutQuart(relativeProgress);

		// calculate new position for every thick of the requesAnimationFrame
		position = initialPosition - amountOfPixelsToScroll * Math.min(easedProgress, 1);

		// set the scrollbar position
		window.scrollTo(0, position);

		// Stop when max scroll is reached
		if (initialPosition !== maxAvailableScroll && window.scrollY === maxAvailableScroll) {
			cancelAnimationFrame(animationFrame);
			return;
		}

		// repeat until the end is reached
		if (elapsed < duration) {
			animationFrame = requestAnimationFrame(step);
		}
	}

	animationFrame = requestAnimationFrame(step);
}

================
File: src/app/util/scrollTo.js
================
import { animateScroll } from "./animate-scroll";

const logError = () => console.error(`Invalid element, are you sure you've provided element id or react ref?`);

const getElementPosition = (element) => element.offsetTop;

export const scrollTo = ({ id, ref = null, duration = 3000 }) => {
	// the position of the scroll bar before the user clicks the button
	const initialPosition = window.scrollY;

	// decide what type of reference that is
	// if neither ref or id is provided  set element to null
	const element = ref ? ref.current : id ? document.getElementById(id) : null;

	if (!element) {
		// log error if the reference passed is invalid
		logError();
		return;
	}

	animateScroll({
		targetPosition: getElementPosition(element),
		initialPosition,
		duration,
	});
};

================
File: src/app/util/useObserver.js
================
import { useState, useEffect } from "react";

export function useIsIntersecting(options, elementRef, keepWatching, callback, callbackRef) {
	const [isIntersecting, setIsIntersecting] = useState(false);

	useEffect(() => {
		if (isIntersecting && !keepWatching) return;
		const observer = new IntersectionObserver(([entry]) => {
			if (entry.isIntersecting) {
				setIsIntersecting(true);
				if (callback) {
					callback(callbackRef);
				}
			}
			if (!entry.isIntersecting && keepWatching) {
				setIsIntersecting(false);
			}
		}, options);

		observer.observe(elementRef.current);
		return () => {
			observer.disconnect();
		};
	}, [callback, callbackRef, elementRef, isIntersecting, options]);

	return isIntersecting;
}

================
File: src/app/globals.css
================
@import url("https://fonts.googleapis.com/css2?family=Permanent+Marker&family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Rock+Salt&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --color-brown: #8B4513;
  --color-gold: #DAA520;
  --color-burnt-orange: #CC5500;
  --color-yellow: #FFD700;
}

@layer base {
  html {
    @apply scroll-smooth;
  }

  body {
    @apply bg-black text-white min-h-[100dvh] overflow-x-hidden;
  }
}

@layer components {
  .container-width {
    @apply w-[95%] sm:w-[90%] max-w-7xl mx-auto;
  }

  .section-padding {
    @apply py-12 sm:py-16 md:py-20 lg:py-24;
  }

  .btn-primary {
    @apply inline-flex items-center justify-center text-sm sm:text-base font-medium text-white bg-gradient-to-r from-gold to-burnt-orange hover:from-burnt-orange hover:to-gold rounded-lg transition-all duration-300 shadow-md hover:shadow-lg whitespace-nowrap;
  }

  .btn-secondary {
    @apply inline-flex items-center justify-center px-4 sm:px-6 py-2.5 sm:py-3 text-sm sm:text-base font-medium text-gold border-2 border-gold hover:bg-gold/10 rounded-lg transition-all duration-300 whitespace-nowrap;
  }
}

@layer utilities {
  .hero-text {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    line-height: 1.1;
    overflow-wrap: break-word;
    word-break: break-word;
    max-width: 100vw;
  }

  .intro-text-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 100%;
    max-width: 100vw;
    padding: 0.5rem;
  }

  .intro-title {
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
    line-height: 0.9;
    overflow-wrap: break-word;
    word-break: break-word;
    max-width: 100%;
    display: block;
    letter-spacing: 0.05em;
  }

  .intro-tagline {
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
    line-height: 1.5;
    letter-spacing: 0.04em;
    font-weight: 300;
  }

  /* Hero text container */ 
  .hero-text-container { 
    overflow-x: hidden;
    max-width: 100%;
    padding: 0 1rem;
  }

  .font-rendering {
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  /* Hide scrollbar for Chrome, Safari and Opera */
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  .no-scrollbar {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }

  /* Element before intersection */
  .reveal {
    opacity: 0;
    transform: translate3d(0, 100px, 0);
    transition: opacity 0.8s, transform 0.8s;
  }

  /* Element after intersection */
  .reveal.visible {
    opacity: 1;
    transform: translate3d(0, 0, 0);
  }
}

================
File: src/app/layout.tsx
================
import { Montserrat, Open_Sans, Poppins } from 'next/font/google';
import './globals.css';
import '@/styles/fonts.css';
import MainLayout from '@/components/layout/MainLayout';
import { getAssetPath } from '@/utils/assetPath';

const montserrat = Montserrat({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-montserrat',
});

const openSans = Open_Sans({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-open-sans',
});

const poppins = Poppins({
  weight: ['300', '400', '500', '600', '700'],
  subsets: ['latin'],
  variable: '--font-poppins',
});

export const metadata = {
  title: 'Lashon Music',
  description: 'Miami-born artist Lashon fuses hip-hop, R&B, and soul into a powerful performance style.',
  themeColor: '#000000',
  manifest: '/manifest.json',
  icons: {
    icon: '/favicon.ico',
    shortcut: '/favicon-16x16.png',
    apple: '/apple-touch-icon.png',
  },
  openGraph: {
    title: 'Lashon Music',
    description: 'Miami-born artist Lashon fuses hip-hop, R&B, and soul into a powerful performance style.',
    url: 'https://lashonmusic.com',
    siteName: 'Lashon Music',
    images: [
      {
        url: '/images/og-image.jpg',
        width: 1200,
        height: 630,
        alt: 'Lashon Music',
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Lashon Music',
    description: 'Miami-born artist Lashon fuses hip-hop, R&B, and soul into a powerful performance style.',
    images: ['/images/twitter-image.jpg'],
  },
};

export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className={`${montserrat.variable} ${openSans.variable} ${poppins.variable} scroll-smooth`}>
      <head>
        <meta name="theme-color" content="#000000" />
        <link rel="manifest" href={getAssetPath('/manifest.json')} />
      </head>
      <body className="antialiased font-sans">
        <MainLayout>{children}</MainLayout>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import Intro from '@/components/home/Intro';
import FeaturedRelease from '@/components/home/FeaturedRelease';
import AboutTeaser from '@/components/home/AboutTeaser';

export const metadata = {
  title: 'Lashon Music',
  description: 'Miami-born artist Lashon fuses hip-hop, R&B, and soul into a powerful performance style.',
};

export default function Home() {
  return (
    <main>
      <Intro />
      <FeaturedRelease />
      <AboutTeaser />
    </main>
  );
}

================
File: src/components/about/Quote.tsx
================
'use client';

import { useInView } from 'react-intersection-observer';
import { motion } from 'framer-motion';
import Link from 'next/link';

export default function Quote() {
  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  return (
    <section
      ref={ref}
      className="section-padding bg-gradient-to-b from-black to-emerald-950"
    >
      <div className="container-width">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="max-w-4xl mx-auto text-center space-y-8"
        >
          <motion.blockquote
            initial={{ opacity: 0, y: 20 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="text-3xl md:text-4xl font-bold text-emerald-400 italic"
          >
            "Music is how I turn my story into a celebration."
          </motion.blockquote>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.4 }}
          >
            <Link
              href="/music"
              className="inline-block bg-emerald-500 text-white px-8 py-3 rounded-md text-lg font-medium hover:bg-emerald-600 transition-colors duration-200"
            >
              Listen to My Music
            </Link>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
}

================
File: src/components/about/Story.tsx
================
'use client';

import { useRef } from 'react';
import { motion, useInView } from 'framer-motion';
import { getAssetPath } from '@/utils/assetPath';

export default function Story() {
  const ref = useRef(null);
  const isInView = useInView(ref, {
    amount: 0.3,
    once: true
  });

  return (
    <section ref={ref} className="section-padding bg-black min-h-screen flex items-center">
      <div className="container-width">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center"
        >
          {/* Story Text */}
          <div className="space-y-8">
            <h1 className="text-5xl font-poppins font-semibold text-gold mb-8">My Story</h1>
            <div className="space-y-6">
              <p className="text-gray-300 text-lg">
                Born and raised in the vibrant city of Miami, my musical journey began at an early age.
                Although I didn't actually begin making music due to being an athlete, the rich cultural
                tapestry of South Florida, combined with my family's deep appreciation for music,
                shaped my unique sound and artistic vision.
              </p>
              <p className="text-gray-300 text-lg">
                After honing in my craft in Miami as a well known athlete, I made the bold decision
                to completely shift gears and move to NY to pursue my dreams as an artist. Here,
                I've had the privilege of working with some of the industry's most innovative
                producers and artists, pushing the boundaries of my artistry and developing a
                style that's truly my own.
              </p>
              <p className="text-gray-300 text-lg">
                Today, I'm excited to share my music with the world, blending the soulful rhythms
                of my Miami roots with the edgy, contemporary sound I've developed in New York.
                Each song tells a story, and I invite you to be part of this musical journey.
              </p>
            </div>
          </div>

          {/* Image */}
          <div className="relative aspect-[3/4] rounded-lg overflow-hidden shadow-2xl">
            <img
              src={getAssetPath('/images/hero-about.jpeg')}
              alt="Lashon's Journey"
              className="w-full h-full object-cover"
            />
          </div>
        </motion.div>
      </div>
    </section>
  );
}

================
File: src/components/contact/ContactForm.tsx
================
'use client';

import { useState } from 'react';
import { useInView } from 'react-intersection-observer';
import { motion } from 'framer-motion';

export default function ContactForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: '',
  });

  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: Implement form submission
    console.log('Form submitted:', formData);
    setFormData({ name: '', email: '', message: '' });
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  return (
    <section ref={ref} className="section-padding bg-black">
      <div className="container-width max-w-3xl">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-gold mb-4">Get in Touch</h2>
          <p className="text-gray-300">
            For bookings, collaborations, or just to say hello, fill out the form below.
          </p>
        </div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="max-w-2xl mx-auto"
        >
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="name" className="block text-gold mb-2">
                  Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  required
                  className="w-full px-4 py-2 bg-gray-900 border border-gray-800 rounded-lg focus:outline-none focus:border-gold text-white"
                />
              </div>
              <div>
                <label htmlFor="email" className="block text-gold mb-2">
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  required
                  className="w-full px-4 py-2 bg-gray-900 border border-gray-800 rounded-lg focus:outline-none focus:border-gold text-white"
                />
              </div>
            </div>
            <div>
              <label htmlFor="message" className="block text-gold mb-2">
                Message
              </label>
              <textarea
                id="message"
                name="message"
                value={formData.message}
                onChange={handleChange}
                rows={6}
                required
                className="w-full px-4 py-2 bg-gray-900 border border-gray-800 rounded-lg focus:outline-none focus:border-gold text-white resize-none"
              ></textarea>
            </div>
            <div className="text-center">
              <button
                type="submit"
                className="w-full bg-gold text-white px-8 py-3 rounded-md text-lg font-medium hover:bg-gold-600 transition-colors duration-200"
              >
                Send Message
              </button>
            </div>
          </form>
        </motion.div>
      </div>
    </section>
  );
}

================
File: src/components/contact/SocialLinks.tsx
================
'use client';

import { useInView } from 'react-intersection-observer';
import { motion } from 'framer-motion';
import {
  FaSpotify,
  FaApple,
  FaSoundcloud,
  FaYoutube,
  FaInstagram,
  FaTwitter,
  FaFacebookF,
} from 'react-icons/fa';
import { socialLinks } from '@/data/navigation';

const iconMap = {
  spotify: FaSpotify,
  apple: FaApple,
  soundcloud: FaSoundcloud,
  youtube: FaYoutube,
  instagram: FaInstagram,
  twitter: FaTwitter,
  facebook: FaFacebookF,
};

export default function SocialLinks() {
  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  return (
    <section ref={ref} className="section-padding bg-gradient-to-b from-black to-emerald-950">
      <div className="container-width">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="max-w-2xl mx-auto text-center"
        >
          <h2 className="text-3xl font-bold text-emerald-400 mb-8">Connect with Me</h2>
          <div className="flex flex-wrap justify-center gap-8">
            {socialLinks.map((link, index) => {
              const Icon = iconMap[link.icon as keyof typeof iconMap];
              return (
                <motion.a
                  key={link.name}
                  href={link.href}
                  target="_blank"
                  rel="noopener noreferrer"
                  initial={{ opacity: 0, y: 20 }}
                  animate={inView ? { opacity: 1, y: 0 } : {}}
                  transition={{ duration: 0.8, delay: index * 0.1 }}
                  className="flex flex-col items-center gap-2 text-gray-300 hover:text-white transition-colors duration-200 group"
                >
                  <div className="p-4 bg-gray-900 rounded-full group-hover:bg-emerald-500 transition-colors duration-200">
                    <Icon className="h-8 w-8" />
                  </div>
                  <span className="text-sm">{link.name}</span>
                </motion.a>
              );
            })}
          </div>
        </motion.div>
      </div>
    </section>
  );
}

================
File: src/components/gallery/PhotoGrid.tsx
================
'use client';

import { useState } from 'react';
import Lightbox from 'yet-another-react-lightbox';
import 'yet-another-react-lightbox/styles.css';
import { motion } from 'framer-motion';
import { getAssetPath } from '@/utils/assetPath';

const photos = [
  {
    src: getAssetPath('/images/gallery-1.jpg'),
    alt: 'Lashon performing in a black dress',
  },
  {
    src: getAssetPath('/images/gallery-2.jpg'),
    alt: 'Lashon at the white piano',
  },
  {
    src: getAssetPath('/images/gallery-3.jpg'),
    alt: 'Lashon in performance',
  },
  {
    src: getAssetPath('/images/about-hero.jpg'),
    alt: 'Lashon portrait',
  },
  {
    src: getAssetPath('/images/about-teaser.jpg'),
    alt: 'Lashon in the studio',
  },
];

export default function PhotoGrid() {
  const [index, setIndex] = useState(-1);

  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {photos.map((photo, i) => (
          <motion.div
            key={photo.src}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: i * 0.1 }}
            className="aspect-square cursor-pointer overflow-hidden rounded-lg"
            onClick={() => setIndex(i)}
          >
            <img
              src={photo.src}
              alt={photo.alt}
              className="h-full w-full object-cover transition-transform duration-300 hover:scale-110"
            />
          </motion.div>
        ))}
      </div>

      <Lightbox
        open={index >= 0}
        index={index}
        close={() => setIndex(-1)}
        slides={photos}
      />
    </>
  );
}

================
File: src/components/home/AboutTeaser.tsx
================
'use client';

import { useRef } from 'react';
import { motion, useInView } from 'framer-motion';
import Link from 'next/link';
import { getAssetPath } from '@/utils/assetPath';

export default function AboutTeaser() {
  const ref = useRef(null);
  const isInView = useInView(ref, {
    amount: 0.3,
    once: true
  });

  return (
    <section ref={ref} className="section-padding bg-black">
      <div className="container-width">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center"
        >
          {/* Content */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="space-y-6"
          >
            <h2 className="text-4xl font-bold text-amber-400 mb-4">About Me</h2>
            <p className="text-gray-300">
              From MVP athlete to soul-stirring artist, my journey has been anything but
              conventional. Born and raised in Miami, my path has led me from the courts
              to the recording studio, where I now create music that moves both body and soul.
            </p>
            <div className="flex flex-wrap justify-center gap-4">
              <Link
                href="/about"
                className="btn-primary inline-block"
              >
                Learn More
              </Link>
              <a
                href="https://www.instagram.com/lashonofficiall?igsh=OXUyNTFmZmp4NG44&utm_source=qr"
                target="_blank"
                rel="noopener noreferrer"
                className="btn-secondary inline-block"
              >
                Instagram
              </a>
              <a
                href="https://www.facebook.com/share/1DoZymVpVz/?mibextid=wwXIfr"
                target="_blank"
                rel="noopener noreferrer"
                className="btn-secondary inline-block"
              >
                Facebook
              </a>
            </div>
          </motion.div>

          {/* Image */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="relative aspect-square"
          >
            <img
              src={getAssetPath('/images/gallery-1.jpg')}
              alt="Lashon performing"
              className="w-full h-full object-cover rounded-lg shadow-2xl"
            />
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
}

================
File: src/components/home/FeaturedRelease.tsx
================
'use client';

import { useRef } from 'react';
import { motion, useInView } from 'framer-motion';
import { getAssetPath } from '@/utils/assetPath';

export default function FeaturedRelease() {
  const ref = useRef(null);
  const isInView = useInView(ref, {
    amount: 0.3,
    once: true
  });

  return (
    <section id="latest-release" className="relative min-h-screen flex items-center justify-center overflow-hidden bg-black">
      {/* Background Image */}
      <div className="absolute inset-0">
        <img
          src={getAssetPath('/images/hero-explore.jpeg')}
          alt="Latest Release Background"
          className="w-full h-full object-cover opacity-70"
        />
        <div className="absolute inset-0 bg-black/60" />
      </div>

      {/* Content */}
      <div className="container-width relative z-10 py-24">
        <motion.div
          ref={ref}
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="max-w-5xl mx-auto px-4"
        >
          <div className="text-center mb-12">
            <h2 className="text-5xl font-poppins font-semibold text-gold mb-4">Latest Release</h2>
            <p className="text-xl text-white/90">Experience the evolution of sound</p>
          </div>

          <div className="bg-black/40 backdrop-blur-sm rounded-lg overflow-hidden p-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
              <div className="aspect-square relative rounded-lg overflow-hidden shadow-2xl">
                <img
                  src={getAssetPath('/images/hero-explore.jpeg')}
                  alt="Latest Release Cover"
                  className="w-full h-full object-cover"
                />
              </div>
              <div className="space-y-8">
                <div>
                  <h3 className="text-4xl font-poppins font-semibold text-gold mb-4">Moolah</h3>
                  <p className="text-gray-300 text-lg">
                    A fusion of hip-hop and R&B that showcases the unique sound and style that defines Lashon's music.
                  </p>
                </div>
                <div className="flex flex-wrap gap-4">
                  <a
                    href="https://open.spotify.com/artist/2RP2ySZkyeBJ2HePYTpTve"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="btn-primary"
                  >
                    Listen on Spotify
                  </a>
                  <a
                    href="https://music.apple.com/us/artist/lashon/1745818645"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="btn-secondary"
                  >
                    Apple Music
                  </a>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </section>
  );
}

================
File: src/components/home/Hero.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Image from 'next/image';

const slides = [
  {
    image: '/images/hero-bg.jpg', // DSC00437-Edit.png - emerald green gown
    alt: 'Lashon in emerald green gown',
  },
  {
    image: '/images/gallery-1.jpg', // KIR_0118.jpg - black dress
    alt: 'Lashon in black dress',
  },
  {
    image: '/images/gallery-2.jpg', // KIR_0123.jpg - white piano
    alt: 'Lashon at the piano',
  },
];

export default function Hero() {
  const [currentSlide, setCurrentSlide] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % slides.length);
    }, 5000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="relative h-screen">
      {/* Background Slideshow */}
      <AnimatePresence mode="wait">
        <motion.div
          key={currentSlide}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 1 }}
          className="absolute inset-0"
        >
          <Image
            src={slides[currentSlide].image}
            alt={slides[currentSlide].alt}
            fill
            priority
            className="object-cover"
            quality={100}
          />
          <div className="absolute inset-0 bg-black/50" />
        </motion.div>
      </AnimatePresence>

      {/* Content */}
      <div className="relative h-full flex items-center justify-center text-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="max-w-4xl px-4 sm:px-6 lg:px-8"
        >
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="text-[1.5rem] xs:text-[2rem] sm:text-[3rem] md:text-[3.5rem] lg:text-[4rem] font-bold text-white mb-4 sm:mb-6 tracking-wider hero-text"
          >
            LASHON
          </motion.h1>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
            className="text-base xs:text-lg sm:text-xl md:text-2xl text-gray-200 mb-6 sm:mb-8 tracking-wide"
          >
            Miami-Born • New York-Trained • Ready to Rise
          </motion.p>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.8 }}
          >
            <a
              href="#latest-release"
              className="inline-block bg-emerald-500 text-white px-8 py-3 rounded-md text-lg font-medium hover:bg-emerald-600 transition-colors duration-200"
            >
              Explore My Music
            </a>
          </motion.div>
        </motion.div>
      </div>

      {/* Slide Indicators */}
      <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2">
        {slides.map((_, index) => (
          <button
            key={index}
            onClick={() => setCurrentSlide(index)}
            className={`w-2 h-2 rounded-full transition-colors duration-200 ${
              index === currentSlide ? 'bg-white' : 'bg-white/50'
            }`}
          >
            <span className="sr-only">Slide {index + 1}</span>
          </button>
        ))}
      </div>
    </div>
  );
}

================
File: src/components/home/Intro.tsx
================
'use client';

import { useRef, useEffect, useState } from "react";
import { motion, useInView } from "framer-motion";
import { getAssetPath } from '@/utils/assetPath';
import Link from 'next/link';

export default function Intro() {
  const ref = useRef(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const isInView = useInView(ref, {
    amount: 0.5,
    once: true
  });
  const [screenWidth, setScreenWidth] = useState(0);

  useEffect(() => {
    // Set initial screen width
    setScreenWidth(window.innerWidth);
    
    // Update screen width on resize
    const handleResize = () => {
      setScreenWidth(window.innerWidth);
    };

    window.addEventListener('resize', handleResize);
    
    // Video handling
    if (videoRef.current) {
      videoRef.current.load();
      const playPromise = videoRef.current.play();
      if (playPromise !== undefined) {
        playPromise.catch(() => {
          // Auto-play was prevented - silent fallback
        });
      }
    }

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  return (
    <section
      ref={ref}
      className="relative min-h-[100dvh] flex items-center justify-center overflow-hidden bg-black py-12 sm:py-16"
    >
      {/* Video Background */}
      <div className="absolute inset-0">
        <video
          ref={videoRef}
          autoPlay
          muted
          loop
          playsInline
          poster={getAssetPath('/images/hero-bg.jpg')}
          className="object-cover w-full h-full"
          preload="auto"
        >
          <source src={getAssetPath('/videos/hero-background-2.mp4')} type="video/mp4" />
        </video>
        <div className="absolute inset-0 bg-black/50" />
      </div>

      {/* Content */}
      <motion.div 
        className="container-width relative z-10 text-center px-4 intro-text-container"
        initial={{ opacity: 0, y: 20 }}
        animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
        transition={{ duration: 0.8 }}
      >
        {screenWidth < 375 ? (
          <img 
            src={getAssetPath('/images/lashon-text-logo.png')} 
            alt="LASHON" 
            className="w-full max-w-[70px] mx-auto mb-3 sm:mb-4" 
          />
        ) : (
          <h1 className="text-[1rem] xs:text-[1.25rem] sm:text-[1.75rem] md:text-[2.25rem] lg:text-[2.75rem] xl:text-[3.25rem] font-amsterdam text-white mb-3 sm:mb-4 leading-[0.9] tracking-normal intro-title">
            LASHON
          </h1>
        )}
        
        <p className="text-xs xs:text-sm sm:text-base md:text-lg text-gray-200 mb-4 sm:mb-6 font-poppins max-w-xl mx-auto intro-tagline opacity-90">
          {screenWidth < 375 ? 
            "Miami-Born • NY-Trained • Rising" : 
            "Miami-Born • New York-Trained • Ready to Rise"
          }
        </p>
        
        <a
          href="#latest-release"
          className="btn-primary text-xs sm:text-sm px-4 sm:px-6 py-2 sm:py-3"
        >
          Explore My Music
        </a>
      </motion.div>
    </section>
  );
}

================
File: src/components/layout/Footer.tsx
================
'use client';

import Link from 'next/link';
import { useState } from 'react';
import { navigation, socialLinks } from '@/data/navigation';
import {
  FaSpotify,
  FaApple,
  FaSoundcloud,
  FaYoutube,
  FaInstagram,
  FaTwitter,
  FaFacebookF,
} from 'react-icons/fa';

const iconMap = {
  spotify: FaSpotify,
  apple: FaApple,
  soundcloud: FaSoundcloud,
  youtube: FaYoutube,
  instagram: FaInstagram,
  twitter: FaTwitter,
  facebook: FaFacebookF,
};

export default function Footer() {
  const [email, setEmail] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: Implement newsletter signup
    console.log('Newsletter signup:', email);
    setEmail('');
  };

  return (
    <footer className="bg-black text-white py-8">
      <div className="container-width">
        <div className="flex flex-col md:flex-row justify-between items-center">
          <div className="mb-4 md:mb-0">
            <a href="/" className="text-2xl xs:text-3xl font-amsterdam text-gold hover:text-burnt-orange transition-colors leading-none">
              LASHON
            </a>
          </div>
          <div className="flex space-x-6">
            <a
              href="https://www.instagram.com/lashonofficiall?igsh=OXUyNTFmZmp4NG44&utm_source=qr"
              target="_blank"
              rel="noopener noreferrer"
              className="text-white hover:text-gold transition-colors"
            >
              Instagram
            </a>
            <a
              href="https://www.facebook.com/share/1DoZymVpVz/?mibextid=wwXIfr"
              target="_blank"
              rel="noopener noreferrer"
              className="text-white hover:text-gold transition-colors"
            >
              Facebook
            </a>
          </div>
          <div className="mt-4 md:mt-0 text-sm text-gray-400">
            &copy; {new Date().getFullYear()} Lashon Music. All rights reserved.
          </div>
        </div>
      </div>
    </footer>
  );
}

================
File: src/components/layout/Header.tsx
================
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { motion, AnimatePresence } from 'framer-motion';
import { navigation } from '@/data/navigation';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';

export default function Header() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  return (
    <header className="fixed w-full z-50 bg-black/80 backdrop-blur-md">
      <nav className="container-width flex items-center justify-between p-4">
        {/* Logo */}
        <Link href="/" className="text-2xl font-bold text-white">
          LASHON
        </Link>

        {/* Desktop Navigation */}
        <div className="hidden md:flex space-x-8">
          {navigation.map((item) => (
            <Link
              key={item.name}
              href={item.href}
              className="text-gray-300 hover:text-white transition-colors duration-200"
            >
              {item.name}
            </Link>
          ))}
        </div>

        {/* Mobile Menu Button */}
        <button
          type="button"
          className="md:hidden text-gray-300 hover:text-white"
          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
        >
          <span className="sr-only">Open main menu</span>
          {mobileMenuOpen ? (
            <XMarkIcon className="h-6 w-6" />
          ) : (
            <Bars3Icon className="h-6 w-6" />
          )}
        </button>
      </nav>

      {/* Mobile Menu */}
      <AnimatePresence>
        {mobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="md:hidden"
          >
            <div className="bg-black/95 backdrop-blur-md px-4 py-6">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className="block py-3 text-gray-300 hover:text-white transition-colors duration-200"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </header>
  );
}

================
File: src/components/layout/MainLayout.tsx
================
'use client';

import Link from 'next/link';
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Footer from './Footer';

interface MainLayoutProps {
  children: React.ReactNode;
}

export default function MainLayout({ children }: MainLayoutProps) {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  return (
    <>
      {/* Navigation */}
      <nav className="fixed w-full z-50 bg-black/90 backdrop-blur-sm">
        <div className="container-width py-2 sm:py-3 md:py-4">
          <div className="flex justify-between items-center">
            {/* Logo */}
            <Link href="/" className="text-xl xs:text-2xl sm:text-3xl font-amsterdam text-gold hover:text-burnt-orange transition-colors leading-none">
              LASHON
            </Link>

            {/* Desktop Navigation */}
            <div className="hidden md:flex space-x-6 lg:space-x-8 text-sm lg:text-base">
              <Link href="/" className="text-white hover:text-gold transition-colors">
                Home
              </Link>
              <Link href="/about" className="text-white hover:text-gold transition-colors">
                About
              </Link>
              <Link href="/music" className="text-white hover:text-gold transition-colors">
                Music
              </Link>
              <Link href="/gallery" className="text-white hover:text-gold transition-colors">
                Gallery
              </Link>
              <Link href="/contact" className="text-white hover:text-gold transition-colors">
                Contact
              </Link>
            </div>

            {/* Mobile Menu Button */}
            <button
              className="md:hidden text-white p-2"
              onClick={toggleMenu}
              aria-label="Toggle Menu"
            >
              <svg
                className="w-6 h-6"
                fill="none"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                {isMenuOpen ? (
                  <path d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path d="M4 6h16M4 12h16M4 18h16" />
                )}
              </svg>
            </button>
          </div>
        </div>

        {/* Mobile Menu */}
        <AnimatePresence>
          {isMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="md:hidden bg-black/95"
            >
              <div className="container-width py-4 flex flex-col space-y-4">
                <Link
                  href="/"
                  className="text-white hover:text-gold transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Home
                </Link>
                <Link
                  href="/about"
                  className="text-white hover:text-gold transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  About
                </Link>
                <Link
                  href="/music"
                  className="text-white hover:text-gold transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Music
                </Link>
                <Link
                  href="/gallery"
                  className="text-white hover:text-gold transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Gallery
                </Link>
                <Link
                  href="/contact"
                  className="text-white hover:text-gold transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Contact
                </Link>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </nav>

      {/* Main Content */}
      <main className="min-h-screen flex flex-col bg-black">
        <AnimatePresence mode="wait">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            transition={{ duration: 0.5 }}
            className="flex-grow"
          >
            {children}
          </motion.div>
        </AnimatePresence>
      </main>

      {/* Footer */}
      <Footer />
    </>
  );
}

================
File: src/components/music/Discography.tsx
================
'use client';

import { useRef } from 'react';
import { motion, useInView } from 'framer-motion';
import MusicPlayer from './MusicPlayer';
import { getAssetPath } from '@/utils/assetPath';

const releases = [
  {
    title: 'Moolah',
    coverImage: getAssetPath('/images/moolah-cover.jpg'),
    description: 'Latest single showcasing the evolution of sound',
    streamingLinks: [
      {
        platform: 'Spotify',
        url: 'https://open.spotify.com/track/moolah'
      },
      {
        platform: 'Apple Music',
        url: 'https://music.apple.com/track/moolah'
      }
    ]
  }
];

export default function Discography() {
  const ref = useRef(null);
  const isInView = useInView(ref, {
    amount: 0.3,
    once: true
  });

  return (
    <section id="latest-release" className="section-padding bg-black">
      <div className="container-width">
        <motion.div
          ref={ref}
          initial={{ opacity: 0 }}
          animate={isInView ? { opacity: 1 } : { opacity: 0 }}
          transition={{ duration: 0.8 }}
        >
          <h2 className="text-4xl font-bold text-gold text-center mb-12">Latest Releases</h2>
          <motion.div
            initial="hidden"
            animate={isInView ? "visible" : "hidden"}
            variants={{
              visible: {
                opacity: 1,
                transition: {
                  staggerChildren: 0.3
                }
              },
              hidden: {
                opacity: 0
              }
            }}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
          >
            {releases.map((release) => (
              <MusicPlayer key={release.title} {...release} />
            ))}
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
}

================
File: src/components/music/MusicPlayer.tsx
================
'use client';

import { useState } from 'react';
import Image from 'next/image';
import { FaPlay, FaPause } from 'react-icons/fa';

interface MusicPlayerProps {
  coverImage?: string;
  title?: string;
  description?: string;
  streamingLinks?: {
    platform: string;
    url: string;
  }[];
}

export default function MusicPlayer({ 
  coverImage = 'https://via.placeholder.com/300',
  title = "Moolah",
  description = "",
  streamingLinks = [
    {
      platform: "Spotify",
      url: "https://open.spotify.com/artist/2RP2ySZkyeBJ2HePYTpTve"
    },
    {
      platform: "Apple Music",
      url: "https://music.apple.com/us/artist/lashon/1745818645"
    }
  ]
}: MusicPlayerProps) {
  const [isPlaying, setIsPlaying] = useState(false);

  const togglePlay = () => {
    setIsPlaying(!isPlaying);
  };

  return (
    <div className="bg-gray-900/50 backdrop-blur-sm rounded-lg overflow-hidden shadow-xl transform transition-all duration-300 hover:scale-105">
      {/* Cover Art */}
      <div className="relative aspect-square">
        <Image
          src={coverImage}
          alt={`${title} cover art`}
          fill
          className="object-cover"
        />
        <button
          onClick={togglePlay}
          className="absolute inset-0 flex items-center justify-center bg-black/50 opacity-0 hover:opacity-100 transition-opacity duration-200"
          aria-label={isPlaying ? 'Pause' : 'Play'}
        >
          {isPlaying ? (
            <FaPause className="w-12 h-12 text-white" />
          ) : (
            <FaPlay className="w-12 h-12 text-white" />
          )}
        </button>
      </div>

      {/* Track Info */}
      <div className="p-4">
        <h3 className="text-2xl font-bold text-gold mb-2">{title}</h3>
        <p className="text-gray-300 mb-4">{description}</p>
        <div className="flex flex-wrap gap-4">
          {streamingLinks.map((link, index) => (
            <a
              key={index}
              href={link.url}
              target="_blank"
              rel="noopener noreferrer"
              className="btn-secondary"
            >
              {link.platform}
            </a>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src/components/shared/PageHeader.tsx
================
'use client';

import { useInView } from 'react-intersection-observer';
import { motion } from 'framer-motion';

interface PageHeaderProps {
  title: string;
  description: string;
  imageSrc: string;
}

export default function PageHeader({
  title,
  description,
  imageSrc,
}: {
  title: string;
  description: string;
  imageSrc: string;
}) {
  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  return (
    <section
      ref={ref}
      className="relative h-[60vh] min-h-[400px] flex items-center justify-center overflow-hidden bg-black"
    >
      {/* Background Image */}
      <div className="absolute inset-0">
        <img
          src={imageSrc}
          alt={title}
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 bg-black/50" />
      </div>

      {/* Content */}
      <motion.div 
        className="container-width relative z-10 text-center"
        initial={{ opacity: 0, y: 20 }}
        animate={inView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
        transition={{ duration: 0.8 }}
      >
        <h1 className="text-6xl font-poppins font-semibold text-gold mb-4">
          {title}
        </h1>
        <p className="text-xl text-white/90">
          {description}
        </p>
      </motion.div>
    </section>
  );
}

================
File: src/data/navigation.ts
================
export const navigation = [
  { name: 'Home', href: '/' },
  { name: 'About', href: '/about' },
  { name: 'Music', href: '/music' },
  { name: 'Gallery', href: '/gallery' },
  { name: 'Contact', href: '/contact' },
];

export const socialLinks = [
  { name: 'Spotify', href: 'https://open.spotify.com/artist/lashonmusic', icon: 'spotify' },
  { name: 'Apple Music', href: 'https://music.apple.com/artist/lashon-music', icon: 'apple' },
  { name: 'SoundCloud', href: 'https://soundcloud.com/lashonmusic', icon: 'soundcloud' },
  { name: 'YouTube', href: 'https://youtube.com/c/lashonmusic', icon: 'youtube' },
  { name: 'Instagram', href: 'https://instagram.com/lashon.music', icon: 'instagram' },
  { name: 'Twitter', href: 'https://twitter.com/lashon_music', icon: 'twitter' },
  { name: 'Facebook', href: 'https://facebook.com/lashonmusic', icon: 'facebook' },
];

================
File: src/styles/fonts.css
================
@font-face {
    font-family: "Amsterdam Four_ttf";
    src: url("https://db.onlinewebfonts.com/t/07cb29fdcb073fff840edc6de2067b50.eot");
    src: url("https://db.onlinewebfonts.com/t/07cb29fdcb073fff840edc6de2067b50.eot?#iefix")format("embedded-opentype"),
    url("https://db.onlinewebfonts.com/t/07cb29fdcb073fff840edc6de2067b50.woff2")format("woff2"),
    url("https://db.onlinewebfonts.com/t/07cb29fdcb073fff840edc6de2067b50.woff")format("woff"),
    url("https://db.onlinewebfonts.com/t/07cb29fdcb073fff840edc6de2067b50.ttf")format("truetype"),
    url("https://db.onlinewebfonts.com/t/07cb29fdcb073fff840edc6de2067b50.svg#Amsterdam Four_ttf")format("svg");
}

.font-amsterdam {
  font-family: "Amsterdam Four_ttf", serif;
  font-weight: normal;
  font-style: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  letter-spacing: 0.05em;
  text-transform: uppercase;
}

/* Media queries for font optimization */
@media (max-width: 375px) {
  .font-amsterdam {
    letter-spacing: -0.02em;
  }
  
  .hero-text-container {
    overflow-x: hidden;
    max-width: 100%;
  }
  
  .tagline-text {
    font-size: 0.875rem;
    padding: 0 0.5rem;
  }
}

/* Media queries for font optimization */
@media (max-width: 375px) {
  .font-amsterdam {
    letter-spacing: -0.02em;
  }
  
  .hero-text-container {
    overflow-x: hidden;
    max-width: 100%;
  }
  
  .tagline-text {
    font-size: 0.875rem;
    padding: 0 0.5rem;
  }
}

================
File: src/types/assets.d.ts
================
declare module '*.mp4' {
  const src: string;
  export default src;
}

declare module '*.jpg' {
  import { StaticImageData } from 'next/image';
  const content: StaticImageData;
  export default content;
}

declare module '*.jpeg' {
  import { StaticImageData } from 'next/image';
  const content: StaticImageData;
  export default content;
}

declare module '*.png' {
  import { StaticImageData } from 'next/image';
  const content: StaticImageData;
  export default content;
}

declare module '*.webp' {
  import { StaticImageData } from 'next/image';
  const content: StaticImageData;
  export default content;
}

declare module '*.svg' {
  import { StaticImageData } from 'next/image';
  const content: StaticImageData;
  export default content;
}

declare module '*.gif' {
  import { StaticImageData } from 'next/image';
  const content: StaticImageData;
  export default content;
}

================
File: src/utils/assetPath.ts
================
export function getAssetPath(path: string): string {
  const basePath = '/lashon-next';
  return `${basePath}${path}`;
}

================
File: src/utils/images.ts
================
import gallery1 from '../../public/images/gallery-1.jpg';
import gallery2 from '../../public/images/gallery-2.jpg';
import gallery3 from '../../public/images/gallery-3.jpg';
import aboutHero from '../../public/images/about-hero.jpg';
import aboutTeaser from '../../public/images/about-teaser.jpg';

export const images = {
  gallery1,
  gallery2,
  gallery3,
  aboutHero,
  aboutTeaser,
} as const;

================
File: temp-assets/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="280" height="60">
  <text x="10" y="40" font-family="Arial" font-size="40" fill="gold">LASHON</text>
</svg>

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: CLAUDE.md
================
# CLAUDE.md - Lashon Music Website Guide

## Commands
- `npm run dev` - Start development server
- `npm run build` - Build production version
- `npm run lint` - Run ESLint
- `npm run deploy` - Deploy to GitHub Pages (runs build first)

## Code Style Guidelines
- **Imports**: Use absolute imports with @ alias (e.g., `@/components/`)
- **Components**: 
  - Function components with explicit return types
  - 'use client' directive for client components
  - Props interfaces defined inline or imported
- **Naming**:
  - PascalCase for components and interfaces
  - camelCase for variables, functions, and instances
- **Styling**: Use Tailwind classes with consistent patterns
- **Fonts**: Montserrat (headings), Open Sans (body), Amsterdam (display)
- **Error Handling**: Use try/catch for async operations
- **TypeScript**: Strict mode enabled, explicit types for props and returns
- **File Structure**: Organized by feature/page in src/components/[feature]

================
File: fix.sh
================
#!/bin/bash

echo "Fixing Responsive Header Issues..."

# Create backup directory
mkdir -p backup-files

# Backup original files
echo "Creating backups..."
cp src/components/home/Intro.tsx backup-files/Intro.tsx.bak
cp src/styles/fonts.css backup-files/fonts.css.bak
cp src/app/globals.css backup-files/globals.css.bak
cp src/components/layout/MainLayout.tsx backup-files/MainLayout.tsx.bak
echo "Backups created in backup-files directory."

# Update Intro.tsx
echo "Updating Intro.tsx..."
cat > src/components/home/Intro.tsx << 'EOF'
'use client';

import { useRef, useEffect, useState } from "react";
import { motion, useInView } from "framer-motion";
import { getAssetPath } from '@/utils/assetPath';
import Link from 'next/link';

export default function Intro() {
  const ref = useRef(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const isInView = useInView(ref, {
    amount: 0.5,
    once: true
  });
  const [screenWidth, setScreenWidth] = useState(0);

  useEffect(() => {
    // Set initial screen width
    setScreenWidth(window.innerWidth);
    
    // Update screen width on resize
    const handleResize = () => {
      setScreenWidth(window.innerWidth);
    };

    window.addEventListener('resize', handleResize);
    
    // Video handling
    if (videoRef.current) {
      videoRef.current.load();
      const playPromise = videoRef.current.play();
      if (playPromise !== undefined) {
        playPromise.catch(() => {
          // Auto-play was prevented - silent fallback
        });
      }
    }

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  return (
    <section
      ref={ref}
      className="relative min-h-[100dvh] flex items-center justify-center overflow-hidden bg-black"
    >
      {/* Video Background */}
      <div className="absolute inset-0">
        <video
          ref={videoRef}
          autoPlay
          muted
          loop
          playsInline
          poster={getAssetPath('/images/hero-bg.jpg')}
          className="object-cover w-full h-full"
          preload="auto"
        >
          <source src={getAssetPath('/videos/hero-background-2.mp4')} type="video/mp4" />
        </video>
        <div className="absolute inset-0 bg-black/50" />
      </div>

      {/* Content */}
      <motion.div 
        className="container-width relative z-10 text-center px-4 hero-text-container"
        initial={{ opacity: 0, y: 20 }}
        animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
        transition={{ duration: 0.8 }}
      >
        {screenWidth < 375 ? (
          <img 
            src={getAssetPath('/images/lashon-text-logo.png')} 
            alt="LASHON" 
            className="w-full max-w-[280px] mx-auto mb-6" 
          />
        ) : (
          <h1 className="text-[3.5rem] xs:text-[5rem] sm:text-[7rem] md:text-[9rem] lg:text-[11rem] xl:text-[13rem] font-amsterdam text-white mb-6 leading-[0.85] tracking-normal">
            LASHON
          </h1>
        )}
        
        <p className="text-base xs:text-lg sm:text-xl md:text-2xl text-gray-200 mb-8 font-poppins max-w-2xl mx-auto tagline-text">
          {screenWidth < 375 ? 
            "Miami-Born • NY-Trained • Rising" : 
            "Miami-Born • New York-Trained • Ready to Rise"
          }
        </p>
        
        <a
          href="#latest-release"
          className="btn-primary text-base sm:text-lg px-8 py-4"
        >
          Explore My Music
        </a>
      </motion.div>
    </section>
  );
}
EOF

# Append to fonts.css
echo "Updating fonts.css..."
cat >> src/styles/fonts.css << 'EOF'

/* Media queries for font optimization */
@media (max-width: 375px) {
  .font-amsterdam {
    letter-spacing: -0.02em;
  }
  
  .hero-text-container {
    overflow-x: hidden;
    max-width: 100%;
  }
  
  .tagline-text {
    font-size: 0.875rem;
    padding: 0 0.5rem;
  }
}
EOF

# Update globals.css
echo "Updating globals.css..."
# Use sed to find utilities section and add the new class
sed -i.tmp '/\@layer utilities/a \
  /* Hero text container */ \
  .hero-text-container { \
    overflow-x: hidden; \
    max-width: 100%; \
  }' src/app/globals.css
rm src/app/globals.css.tmp

# Create temp folder for the logo
mkdir -p temp-assets

# Generate a placeholder image file
echo "Creating placeholder logo image..."
cat > temp-assets/placeholder.svg << 'EOF'
<svg xmlns="http://www.w3.org/2000/svg" width="280" height="60">
  <text x="10" y="40" font-family="Arial" font-size="40" fill="gold">LASHON</text>
</svg>
EOF

# Update MainLayout.tsx to make navigation logo responsive
echo "Updating MainLayout.tsx logo..."
# This is more complex as we need to find and replace a specific block
# For shell script, we'll use a simpler approach - inform user to make the change manually

echo ""
echo "-------------------------------------------"
echo "IMPORTANT NEXT STEPS:"
echo "1. Make sure to create a lashon-text-logo.png file in /public/images/ directory"
echo "2. This should be a PNG of your \"LASHON\" text in Amsterdam font"
echo "3. Optimal size: ~280px width with transparent background"
echo "4. A placeholder SVG has been created in temp-assets folder"
echo ""
echo "Optional but recommended - Update your MainLayout.tsx file:"
echo "Find the Logo link and replace with this code:"
echo ""
echo "<Link href=\"/\" className=\"text-xl xs:text-2xl sm:text-3xl font-amsterdam text-gold hover:text-burnt-orange transition-colors leading-none max-w-[180px] inline-block\">"
echo "  <span className=\"hidden sm:inline\">LASHON</span>"
echo "  <img "
echo "    src={getAssetPath('/images/lashon-text-logo.png')} "
echo "    alt=\"LASHON\" "
echo "    className=\"h-8 sm:hidden\" "
echo "  />"
echo "</Link>"
echo "-------------------------------------------"
echo ""

echo "Responsive fixes completed!"

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}

================
File: lashon_music_website.code-workspace
================
{
	"folders": [
		{
			"path": "../../Library/Mobile Documents/com~apple~CloudDocs/Downloads/lashon_music_website"
		},
		{
			"path": "."
		}
	],
	"settings": {}
}

================
File: LICENSE
================
MIT License

Copyright (c) 2023 Stefano Galiffa

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  images: {
    unoptimized: true,
  },
  trailingSlash: true,
  basePath: '/lashon-next',
  assetPrefix: '/lashon-next/',
  webpack: (config) => {
    config.module.rules.push({
      test: /\.(ttf|woff|woff2)$/,
      use: {
        loader: 'file-loader',
        options: {
          name: '[name].[ext]',
          publicPath: '/lashon-next/',
        },
      },
    });
    return config;
  },
}

module.exports = nextConfig

================
File: package.json
================
{
  "name": "lashon-next",
  "version": "0.1.0",
  "private": true,
  "homepage": "https://nicholasglazer1.github.io/lashon-next",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d out"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.1",
    "framer-motion": "^11.18.2",
    "next": "14.1.0",
    "react": "^18",
    "react-dom": "^18",
    "react-icons": "^5.0.1",
    "react-intersection-observer": "^9.8.0",
    "sharp": "^0.33.5",
    "yet-another-react-lightbox": "^3.21.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.1.0",
    "file-loader": "^6.2.0",
    "gh-pages": "^6.1.1",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5",
    "webpack": "^5.97.1"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Lashon Music Website

A modern, responsive website for artist Lashon, built with Next.js, TypeScript, and Tailwind CSS.

## Features

### Home Page
- Hero section with dynamic slideshow featuring Lashon in various settings
- "Miami-Born • New York-Trained • Ready to Rise" tagline
- Featured release section showcasing "Moolah"
- About teaser with call-to-action to learn more

### About Page
- Page header with striking image
- Story section detailing Lashon's journey from MVP athlete to musician
- Quote section with inspirational message
- Visual elements including performance and studio shots

### Music Page
- Discography section featuring released tracks
- Interactive music player with streaming links
- Cover art display
- Track information and release dates

### Gallery Page
- Responsive photo grid layout
- Lightbox feature for enlarged image viewing
- Collection of professional photos including:
  - Performance shots
  - Studio sessions
  - Promotional photography

### Contact Page
- Contact form for inquiries
- Social media links
- Professional booking information

## Technology Stack

- **Framework**: Next.js 14
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **Animations**: Framer Motion
- **Icons**: Heroicons & React Icons
- **Fonts**: 
  - Montserrat (headings)
  - Open Sans (body text)

## Getting Started

1. Clone the repository:
```bash
git clone https://github.com/yourusername/lashon-next.git
```

2. Install dependencies:
```bash
cd lashon-next
npm install
```

3. Start the development server:
```bash
npm run dev
```

4. Open [http://localhost:3000](http://localhost:3000) in your browser.

## Project Structure

```
src/
├── app/                # Next.js app router pages
├── components/         # React components
│   ├── about/         # About page components
│   ├── contact/       # Contact page components
│   ├── gallery/       # Gallery page components
│   ├── home/          # Home page components
│   ├── layout/        # Layout components
│   ├── music/         # Music page components
│   └── shared/        # Shared components
├── data/              # Static data and configuration
└── styles/            # Global styles and Tailwind config
```

## Design System

- **Colors**:
  - Deep Emerald Green & Gold (accents)
  - Black and Charcoal Gray (backgrounds)
  - White/Off-White (text and contrast)

- **Typography**:
  - Headings: Montserrat (bold, clean sans-serif)
  - Body: Open Sans (neutral sans-serif)

- **Components**:
  - Consistent button styles
  - Animated transitions
  - Responsive navigation
  - Mobile-friendly layouts

## Contributing

1. Fork the repository
2. Create your feature branch
3. Commit your changes
4. Push to the branch
5. Open a pull request

## License

This project is private and proprietary. All rights reserved.

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    screens: {
      'xs': '375px',
      'sm': '640px',
      'md': '768px',
      'lg': '1024px',
      'xl': '1280px',
      '2xl': '1536px',
    },
    extend: {
      backgroundImage: {
        "album-cover": "url('/panic-panini-album.jpg')",
        "incoming-shows": "url('/coming-shows-bg.jpg')",
        "hero-pattern": "url('/pattern.png')",
      },
      fontFamily: {
        heading: ['var(--font-montserrat)'],
        sans: ['var(--font-open-sans)'],
        permanentMarker: ["Permanent Marker", "sans-serif"],
        poppins: ["Poppins", "sans-serif"],
        rockSalt: ["Rock Salt", "sans-serif"],
        montserrat: ['var(--font-montserrat)'],
        'open-sans': ['var(--font-open-sans)'],
        amsterdam: ['var(--font-amsterdam)', 'serif'],
      },
      colors: {
        emerald: {
          50: '#ecfdf5',
          100: '#d1fae5',
          200: '#a7f3d0',
          300: '#6ee7b7',
          400: '#34d399',
          500: '#10b981',
          600: '#059669',
          700: '#047857',
          800: '#065f46',
          900: '#064e3b',
          950: '#022c22',
        },
        "fluo-green": "#43ffb6",
        "yellow-btn-primary": "#ffc621",
        "medium-gray": "#bebebe",
        brown: {
          DEFAULT: '#8B4513',
          light: '#A0522D',
          dark: '#8B4513',
        },
        gold: {
          DEFAULT: '#DAA520',
          light: '#FFD700',
          dark: '#B8860B',
        },
        'burnt-orange': '#CC5500',
      },
      boxShadow: {
        "centered-shadow": "0px 0px 19px 4px rgba(0,0,0,0.1)",
      },
      keyframes: {
        slideUp: {
          "0%": { transform: "translateY(80px)" },
          "100%": { transform: "translateY(0px)" },
        },
      },
      animation: {
        slideUp: "slideUp ease .3s forwards 1.2s",
      },
    },
  },
  plugins: [],
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "typeRoots": ["./node_modules/@types", "./src/types"],
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "src/types/**/*.d.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
